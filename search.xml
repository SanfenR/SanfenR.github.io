<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Android-JNI&NDK(一)入门]]></title>
      <url>http://yoursite.com/2017/10/16/android/Android-JNI&NDK(%E4%B8%80)%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<p>[TOC]</p>
<h1 id="Android-JNI-amp-NDK-一-入门"><a href="#Android-JNI-amp-NDK-一-入门" class="headerlink" title="Android-JNI&amp;NDK(一)入门"></a>Android-JNI&amp;NDK(一)入门</h1><h2 id="一-前言"><a href="#一-前言" class="headerlink" title="一. 前言"></a>一. 前言</h2><p>最近项目中要求要使用so库实现数据加密，来提高数据的安全性，因为好久没用过Android调用native方法，特别写这一篇回忆一下用法。</p>
<p><a href="https://developer.android.com/ndk/guides/index.html?hl=zh-cn" target="_blank" rel="external">官方教程</a></p>
<h2 id="二-简介"><a href="#二-简介" class="headerlink" title="二. 简介"></a>二. 简介</h2><h3 id="NDK-Native-Development-Kit"><a href="#NDK-Native-Development-Kit" class="headerlink" title="NDK(Native Development Kit)"></a>NDK(Native Development Kit)</h3><ol>
<li>Android NDK 是一套允许您使用原生代码语言（例如 C 和 C++）实现部分应用的工具集。在开发某些类型应用时，这有助于您重复使用以这些语言编写的代码库。</li>
<li>NDK的作用<ul>
<li>从设备获取卓越性能以用于计算密集型应用，例如游戏或物理模拟。</li>
<li>重复使用您自己或其他开发者的 C 或 C++ 库。</li>
<li>代码的保护。由于apk的java层代码很容易被反编译，而C/C++库反汇难度较大。</li>
</ul>
</li>
</ol>
<h3 id="JNI-Java-Native-Interface"><a href="#JNI-Java-Native-Interface" class="headerlink" title="JNI(Java Native Interface)"></a>JNI(Java Native Interface)</h3><ol>
<li>JNI 是本地编程接口，它使得在 Java 虚拟机内部运行的 Java 代码能够与用其它语言(如 C、C++)编写的代码进行交互。</li>
<li>JNI的作用<ul>
<li>可以让java调用c语言的代码。</li>
</ul>
</li>
</ol>
<h2 id="三-NDK安装"><a href="#三-NDK安装" class="headerlink" title="三. NDK安装"></a>三. NDK安装</h2><p>在<figure class="highlight plain"><figcaption><span>SDKManager```下载更新ndk</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">![NDK下载](http://ohqvqufyf.bkt.clouddn.com/ndk_download.png)</div><div class="line"></div><div class="line"></div><div class="line">## 四. JNI使用</div><div class="line"></div><div class="line">### 创建项目</div><div class="line">1. 首先创建一个AS项目。</div><div class="line"></div><div class="line">    ![image](http://ohqvqufyf.bkt.clouddn.com/ndk_createproject.png)</div><div class="line"></div><div class="line">2. 配置gradle.properties文件</div></pre></td></tr></table></figure></p>
<pre><code>    android.useDeprecatedNdk=true
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">    ![image](http://ohqvqufyf.bkt.clouddn.com/ndk_%E9%85%8D%E7%BD%AE1.png)</div><div class="line"></div><div class="line">3. 在local.properties中加入ndk和sdk的路径：</div></pre></td></tr></table></figure>

ndk.dir=/Users/xxx/Library/Android/sdk/ndk-bundle

sdk.dir=/Users/xxx/Library/Android/sdk
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">    ![image](http://ohqvqufyf.bkt.clouddn.com/ndk_%E9%85%8D%E7%BD%AE2.png)</div><div class="line"></div><div class="line">4. 配置build.gradle中配置ndk的生成的so名字和支持的CPU平台（下文会介绍在如何Android.mk中去配置）。</div></pre></td></tr></table></figure>

ndk{
        moduleName &quot;hello&quot;       //生成的so文件名字，调用C程序的代码中会用到该名字
        abiFilters &quot;armeabi&quot;, &quot;armeabi-v7a&quot;, &quot;x86&quot; //输出指定三种平台下的so库
    }
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">    ![image](http://ohqvqufyf.bkt.clouddn.com/ndk_%E9%85%8D%E7%BD%AE3.png)</div><div class="line"></div><div class="line">项目的准备工作做完了，接下来是代码的部分。</div><div class="line"></div><div class="line">### 使用JNI</div><div class="line"></div><div class="line">1. 创建native方法</div><div class="line"></div><div class="line">    ```java</div><div class="line">    public class MainActivity extends AppCompatActivity &#123;</div><div class="line">        TextView mHelloText;</div><div class="line">        @Override</div><div class="line">        protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">            super.onCreate(savedInstanceState);</div><div class="line">            setContentView(R.layout.activity_main);</div><div class="line">            mHelloText = (TextView) findViewById(R.id.hello);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public native String sayHelloByJNI();</div><div class="line">    &#125;</div></pre></td></tr></table></figure>

![image](http://ohqvqufyf.bkt.clouddn.com/ndk_%E5%88%9B%E5%BB%BAnative%E6%96%B9%E6%B3%95.png)
</code></pre><ol>
<li><p>使用<figure class="highlight plain"><figcaption><span>-jni```命令MainActivity.java生成JNI的.h文件。</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure></p>
<p> cd app/src/main/java</p>
<p> javah -jni co.fensan.android.jnidemo.MainActivity</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">![image](http://ohqvqufyf.bkt.clouddn.com/ndk_%E5%88%9B%E5%BB%BAh.png)</div><div class="line"></div><div class="line">发现在当前目录生成了``` co_fensan_android_jnidemo_MainActivity.h</div></pre></td></tr></table></figure>
</li>
<li><p>创建JNI目录并将.h文件移动到jni目录<br> <img src="http://ohqvqufyf.bkt.clouddn.com/ndk_%E5%88%9B%E5%BB%BAjni%E6%96%87%E4%BB%B6.png" alt="image"></p>
</li>
</ol>
<p>然后创建.cpp文件</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"co_fensan_android_jnidemo_MainActivity.h"</span></span></div><div class="line"></div><div class="line"><span class="function">JNIEXPORT jstring JNICALL</span></div><div class="line"><span class="title">Java_co_fensan_android_jnidemo_MainActivity_sayHelloByJNI</span><span class="params">(JNIEnv *env, jobject instance)</span> &#123;</div><div class="line">        <span class="keyword">return</span> env-&gt;NewStringUTF(<span class="string">"hello jni!"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://ohqvqufyf.bkt.clouddn.com/ndk_%E5%88%9B%E5%BB%BAcpp.png" alt="image"></p>
<ol>
<li>在MainActivity中引入hello库</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> &#123;</div><div class="line">        System.loadLibrary(<span class="string">"hello"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    TextView mHelloText;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        mHelloText = (TextView) findViewById(R.id.hello);</div><div class="line">        mHelloText.setText(sayHelloByJNI());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> String <span class="title">sayHelloByJNI</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<pre><code>![image](http://ohqvqufyf.bkt.clouddn.com/ndk_%E5%BC%95%E5%85%A5lib.png)
</code></pre><h2 id="五-运行结果"><a href="#五-运行结果" class="headerlink" title="五. 运行结果"></a>五. 运行结果</h2><!--<img src="http://ohqvqufyf.bkt.clouddn.com/ndk_%E6%95%88%E6%9E%9C.png"/>-->
<p><img src="http://ohqvqufyf.bkt.clouddn.com/ndk_%E6%95%88%E6%9E%9C.png" alt="image"></p>
<p><a href="https://github.com/SanfenR/JNIDemo" target="_blank" rel="external">源码传送门</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[解决java.lang.SecurityException]]></title>
      <url>http://yoursite.com/2017/10/10/java/%E8%A7%A3%E5%86%B3java.lang.SecurityException/</url>
      <content type="html"><![CDATA[<h3 id="解决java-lang-SecurityException-Invalid-signature-file-digest-for-Manifest-main-attributes"><a href="#解决java-lang-SecurityException-Invalid-signature-file-digest-for-Manifest-main-attributes" class="headerlink" title="解决java.lang.SecurityException: Invalid signature file digest for Manifest main attributes"></a>解决java.lang.SecurityException: Invalid signature file digest for Manifest main attributes</h3><p>当项目依赖其他jar包的时候，打出的jar包执行出错，抛出这个异常。</p>
<p>原因：因为依赖jar包中的META-INF中有多余的.SF文件与当前jar包冲突，</p>
<ul>
<li><p>解决方案 一</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">在打包前删除依赖jar包的.SF文件</div></pre></td></tr></table></figure>
</li>
<li><p>解决方案 二</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">在打完的jar包执行</div><div class="line"></div><div class="line">zip -d your.jar &apos;META-INF/.SF&apos; &apos;META-INF/.RSA&apos; &apos;META-INF/*SF&apos;</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[git命令]]></title>
      <url>http://yoursite.com/2017/04/12/git%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<p>1.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git init #初始化本地git仓库（创建新仓库）</div></pre></td></tr></table></figure></p>
<p>2.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git config --global user.name &quot;xxx&quot; # 配置用户名</div></pre></td></tr></table></figure></p>
<p>3.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git config --global user.email &quot;xxx@xxx.com&quot; # 配置邮件</div></pre></td></tr></table></figure></p>
<p>4.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git config --global color.ui true  # git status等命令自动着色</div></pre></td></tr></table></figure></p>
<p>5.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git config --global color.status auto</div></pre></td></tr></table></figure></p>
<p>6.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git config --global color.diff auto</div></pre></td></tr></table></figure></p>
<p>7.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git config --global color.branch auto</div></pre></td></tr></table></figure></p>
<p>8.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git config --global color.interactive auto</div></pre></td></tr></table></figure></p>
<p>9.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git config --global --unset http.proxy # remove  proxy configuration on git</div></pre></td></tr></table></figure></p>
<p>10.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone git+ssh://git@192.168.53.168/VT.git  # clone远程仓库</div></pre></td></tr></table></figure></p>
<p>11.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git status  # 查看当前版本状态（是否修改）</div></pre></td></tr></table></figure></p>
<p>12.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git add xyz # 添加xyz文件至index</div></pre></td></tr></table></figure></p>
<p>13.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git add .   # 增加当前子目录下所有更改过的文件至index</div></pre></td></tr></table></figure></p>
<p>14.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git commit -m &apos;xxx&apos; # 提交</div></pre></td></tr></table></figure></p>
<p>15.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git commit --amend -m &apos;xxx&apos; # 合并上一次提交（用于反复修改）</div></pre></td></tr></table></figure></p>
<p>16.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git commit -am &apos;xxx&apos;    # 将add和commit合为一步</div></pre></td></tr></table></figure></p>
<p>17.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git rm xxx  # 删除index中的文件</div></pre></td></tr></table></figure></p>
<p>18.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git rm -r * # 递归删除</div></pre></td></tr></table></figure></p>
<p>19.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git log  # 显示提交日志</div></pre></td></tr></table></figure></p>
<p>20.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git log -1  # 显示1行日志 -n为n行</div></pre></td></tr></table></figure></p>
<p>21.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git log -5</div></pre></td></tr></table></figure></p>
<p>22.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git log --stat  # 显示提交日志及相关变动文件</div></pre></td></tr></table></figure></p>
<p>23.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git log -p -m</div></pre></td></tr></table></figure></p>
<p>24.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git show dfb02e6e4f2f7b573337763e5c0013802e392818   # 显示某个提交的详细内容</div></pre></td></tr></table></figure></p>
<p>25.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git show dfb02 # 可只用commitid的前几位</div></pre></td></tr></table></figure></p>
<p>26.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git show HEAD  # 显示HEAD提交日志</div></pre></td></tr></table></figure></p>
<p>27.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git show HEAD^  # 显示HEAD的父（上一个版本）的提交日志 ^^为上两个版本 ^5为上5个版本</div></pre></td></tr></table></figure></p>
<p>28.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git tag # 显示已存在的tag</div></pre></td></tr></table></figure></p>
<p>29.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git tag -a v2.0 -m &apos;xxx&apos; # 增加v2.0的tag</div></pre></td></tr></table></figure></p>
<p>30.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git show v2.0  # 显示v2.0的日志及详细内容</div></pre></td></tr></table></figure></p>
<p>31.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git log v2.0 # 显示v2.0的日志</div></pre></td></tr></table></figure></p>
<p>32.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git diff  # 显示所有未添加至index的变更</div></pre></td></tr></table></figure></p>
<p>33.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git diff --cached # 显示所有已添加index但还未commit的变更</div></pre></td></tr></table></figure></p>
<p>34.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git diff HEAD^  # 比较与上一个版本的差异</div></pre></td></tr></table></figure></p>
<p>35.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git diff HEAD -- ./lib   # 比较与HEAD版本lib目录的差异</div></pre></td></tr></table></figure></p>
<p>36.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git diff origin/master..master   #比较远程分支master上有本地分支master上没有的</div></pre></td></tr></table></figure></p>
<p>37.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git diff origin/master..master --stat   # 只显示差异的文件，不显示具体内容</div></pre></td></tr></table></figure></p>
<p>38.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git remote add origin git+ssh://git@192.168.53.168/VT.git # 增加远程定义（用于push/pull/fetch）</div></pre></td></tr></table></figure></p>
<p>39.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git branch  # 显示本地分支</div></pre></td></tr></table></figure></p>
<p>40.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git branch --contains 50089  # 显示包含提交50089的分支</div></pre></td></tr></table></figure></p>
<p>41.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git branch -a  # 显示所有分支</div></pre></td></tr></table></figure></p>
<p>42.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git branch -r # 显示所有原创分支</div></pre></td></tr></table></figure></p>
<p>43.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git branch --merged # 显示所有已合并到当前分支的分支</div></pre></td></tr></table></figure></p>
<p>44.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git branch --no-merged  # 显示所有未合并到当前分支的分支</div></pre></td></tr></table></figure></p>
<p>45.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git branch -m master master_copy # 本地分支改名</div></pre></td></tr></table></figure></p>
<p>46.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git checkout -b master_copy  # 从当前分支创建新分支master_copy并检出</div></pre></td></tr></table></figure></p>
<p>47.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git checkout -b master master_copy # 上面的完整版</div></pre></td></tr></table></figure></p>
<p>48.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git checkout features/performance   # 检出已存在的features/performance分支</div></pre></td></tr></table></figure></p>
<p>49.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git checkout --track hotfixes/BJVEP933  # 检出远程分支hotfixes/BJVEP933并创建本地跟踪分支</div></pre></td></tr></table></figure></p>
<p>50.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git checkout v2.0  # 检出版本v2.0</div></pre></td></tr></table></figure></p>
<p>51.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git checkout -b devel origin/develop  # 从远程分支develop创建新本地分支devel并检出</div></pre></td></tr></table></figure></p>
<p>52.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git checkout -- README  # 检出head版本的README文件（可用于修改错误回退）</div></pre></td></tr></table></figure></p>
<p>53.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git merge origin/master  # 合并远程master分支至当前分支</div></pre></td></tr></table></figure></p>
<p>54.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git cherry-pick ff44785404a8e   # 合并提交ff44785404a8e的修改</div></pre></td></tr></table></figure></p>
<p>55.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push origin master  # 将当前分支push到远程master分支</div></pre></td></tr></table></figure></p>
<p>56.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push origin :hotfixes/BJVEP933  # 删除远程仓库的hotfixes/BJVEP933分支</div></pre></td></tr></table></figure></p>
<p>57.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push --tags # 把所有tag推送到远程仓库</div></pre></td></tr></table></figure></p>
<p>58.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git fetch   # 获取所有远程分支（不更新本地分支，另需merge）</div></pre></td></tr></table></figure></p>
<p>59.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git fetch --prune  # 获取所有原创分支并清除服务器上已删掉的分支</div></pre></td></tr></table></figure></p>
<p>60.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git pull origin master  # 获取远程分支master并merge到当前分支</div></pre></td></tr></table></figure></p>
<p>61.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git mv README README2   # 重命名文件README为README2</div></pre></td></tr></table></figure></p>
<p>62.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git reset --hard HEAD  # 将当前版本重置为HEAD（通常用于merge失败回退）</div></pre></td></tr></table></figure></p>
<p>63.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git rebase</div></pre></td></tr></table></figure></p>
<p>64.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git branch -d hotfixes/BJVEP933 # 删除分支hotfixes/BJVEP933（本分支修改已合并到其他分支）</div></pre></td></tr></table></figure></p>
<p>65.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git branch -D hotfixes/BJVEP933 # 强制删除分支hotfixes/BJVEP933</div></pre></td></tr></table></figure></p>
<p>66.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git ls-files    # 列出git index包含的文件</div></pre></td></tr></table></figure></p>
<p>67.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git show-branch  # 图示当前分支历史</div></pre></td></tr></table></figure></p>
<p>68.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git show-branch --all   # 图示所有分支历史</div></pre></td></tr></table></figure></p>
<p>69.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git whatchanged     # 显示提交历史对应的文件修改</div></pre></td></tr></table></figure></p>
<p>70.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git revert dfb02e6e4f2f7b573337763e5c0013802e392818 # 撤销提交dfb02e6e4f2f7b573337763e5c0013802e392818</div></pre></td></tr></table></figure></p>
<p>71.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git ls-tree HEAD # 内部命令：显示某个git对象</div></pre></td></tr></table></figure></p>
<p>72.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git rev-parse v2.0  # 内部命令：显示某个ref对于的SHA1 HASH</div></pre></td></tr></table></figure></p>
<p>73.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git reflog  # 显示所有提交，包括孤立节点</div></pre></td></tr></table></figure></p>
<p>74.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git show HEAD@&#123;5&#125;</div></pre></td></tr></table></figure></p>
<p>75.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git show master@&#123;yesterday&#125; # 显示master分支昨天的状态</div></pre></td></tr></table></figure></p>
<p>76.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git log --pretty=format:&apos;%h %s&apos; --graph                   # 图示提交日志</div></pre></td></tr></table></figure></p>
<p>77.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git show HEAD~3</div></pre></td></tr></table></figure></p>
<p>78.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git show -s --pretty=raw 2be7fcb476</div></pre></td></tr></table></figure></p>
<p>79.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git stash   # 暂存当前修改，将所有至为HEAD状态</div></pre></td></tr></table></figure></p>
<p>80.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git stash list   # 查看所有暂存</div></pre></td></tr></table></figure></p>
<p>81.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git stash show -p stash@&#123;0&#125; # 参考第一次暂存</div></pre></td></tr></table></figure></p>
<p>82.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git stash apply stash@&#123;0&#125;  # 应用第一次暂存</div></pre></td></tr></table></figure></p>
<p>83.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git grep &quot;delete from&quot;   # 文件中搜索文本“delete from”</div></pre></td></tr></table></figure></p>
<p>84.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git grep -e &apos;#define&apos; --and -e SORT_DIRENT</div></pre></td></tr></table></figure></p>
<p>85.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git gc</div></pre></td></tr></table></figure></p>
<p>86.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git fsck</div></pre></td></tr></table></figure></p>
<p>87.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git log --oneline --abbrev-commit --all --graph --decorate --color  # 显示所有branch提交历史图</div></pre></td></tr></table></figure></p>
<p>88.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git checkout --patch commitid filename  # 合并指定commit的指定文件</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android修改包名]]></title>
      <url>http://yoursite.com/2017/04/11/android/Android%E4%BF%AE%E6%94%B9%E5%8C%85%E5%90%8D/</url>
      <content type="html"><![CDATA[<h3 id="优雅的修改包名"><a href="#优雅的修改包名" class="headerlink" title="优雅的修改包名"></a>优雅的修改包名</h3><blockquote>
<p>在开发中碰到修改包名的时候，需要修改许多文件，下面演示一种比较方便的修改包名的方法。</p>
</blockquote>
<ol>
<li>在项目列表中取消勾选<code>Compact Empty Middle Package</code></li>
</ol>
<p><img src="http://ohqvqufyf.bkt.clouddn.com/android_compact.png" alt="before"></p>
<ol>
<li>取消勾选显示出项目的所有目录结构</li>
</ol>
<p><img src="http://ohqvqufyf.bkt.clouddn.com/android_compact_next.png" alt="after"></p>
<ol>
<li>修改包名<br><img src="http://ohqvqufyf.bkt.clouddn.com/android_compact_rename.png" alt="rename_package"></li>
</ol>
<ol>
<li>修改gradle中的包名<br><img src="http://ohqvqufyf.bkt.clouddn.com/android_compact_gradle_rename.png" alt="rename_gradle"></li>
</ol>
<p>修改完成。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Homebrew常用操作]]></title>
      <url>http://yoursite.com/2017/04/07/Homebrew%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</url>
      <content type="html"><![CDATA[<h2 id="Homebrew"><a href="#Homebrew" class="headerlink" title="Homebrew"></a>Homebrew</h2><ul>
<li><a href="#更新Homebrew">更新Homebrew</a></li>
<li><a href="#更新包(formula">更新包 (formula)</a>)</li>
<li><a href="#清理旧版本">清理旧版本</a></li>
<li><a href="#锁定不想更新的包">锁定不想更新的包</a></li>
<li><a href="#其他几个常用命令">其他几个常用命令</a></li>
</ul>
<h3 id="更新Homebrew"><a href="#更新Homebrew" class="headerlink" title="更新Homebrew"></a>更新Homebrew</h3><p>要获取最新的包的列表，首先得更新 Homebrew 自己。这可以用 brew update 办到。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew update</div></pre></td></tr></table></figure></p>
<h3 id="更新包-formula"><a href="#更新包-formula" class="headerlink" title="更新包(formula)"></a>更新包(formula)</h3><p>要获取最新的包的列表，首先得更新 Homebrew 自己。这可以用 brew update 办到。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew outdated</div></pre></td></tr></table></figure></p>
<p>更新需要更新的包</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">brew upgrade             # 更新所有的包</div><div class="line">brew upgrade $FORMULA    # 更新指定的包</div></pre></td></tr></table></figure>
<h3 id="清理旧版本"><a href="#清理旧版本" class="headerlink" title="清理旧版本"></a>清理旧版本</h3><p>一般情况下，新版本安装了，旧版本就不需要了。我会用<code>brew cleanup</code> 清理旧版本和缓存文件。Homebrew 只会清除比当前安装的包更老的版本，所以不用担心有些包没更新但被删了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">brew cleanup             # 清理所有包的旧版本</div><div class="line">brew cleanup $FORMULA    # 清理指定包的旧版本</div><div class="line">brew cleanup -n          # 查看可清理的旧版本包，不执行实际操作</div></pre></td></tr></table></figure></p>
<h3 id="锁定不想更新的包"><a href="#锁定不想更新的包" class="headerlink" title="锁定不想更新的包"></a>锁定不想更新的包</h3><p>如果经常更新的话，<code>brew update</code> 一次更新所有的包是非常方便的。但我们有时候会担心自动升级把一些不希望更新的包更新了。数据库就属于这一类，尤其是 PostgreSQL 跨 minor 版本升级都要迁移数据库的。我们更希望找个时间单独处理它。这时可用 <code>brew pin</code> 去锁定这个包，然后 brew update 就会略过它了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">brew pin $FORMULA      # 锁定某个包</div><div class="line">brew unpin $FORMULA    # 取消锁定</div></pre></td></tr></table></figure>
<h3 id="其他几个常用命令"><a href="#其他几个常用命令" class="headerlink" title="其他几个常用命令"></a>其他几个常用命令</h3><p><code>brew info</code> 可以查看包的相关信息，最有用的应该是包依赖和相应的命令。比如 Nginx 会提醒你怎么加 launchctl ，PostgreSQL 会告诉你如何迁移数据库。这些信息会在包安装完成后自动显示，如果忘了的话可以用这个命令很方便地查看。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">brew info $FORMULA    # 显示某个包的信息</div><div class="line">brew info             # 显示安装了包数量，文件数量，和总占用空间</div></pre></td></tr></table></figure>
<p><code>brew deps</code> 可以显示包的依赖关系，我常用它来查看已安装的包的依赖，然后判断哪些包是可以安全删除的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew deps --installed --tree # 查看已安装的包的依赖，树形显示</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[四月]]></title>
      <url>http://yoursite.com/2017/04/05/essay/%E5%9B%9B%E6%9C%88/</url>
      <content type="html"><![CDATA[<ol>
<li><p><a href="https://juejin.im/post/58e0d781a0bb9f0069ec08d3" target="_blank" rel="external">在 Android Studio 上调试数据库 ( SQLite )</a></p>
<ul>
<li>以前 Eclipse 时代，调试 SQLite 都是将数据库文件导出到电脑，然后再用软件打开查看。现在我们用 Android Studio，有没有更方便的方法呢？</li>
</ul>
</li>
<li><p><a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2016/0924/6637.html" target="_blank" rel="external">详解7.0带来的新工具类：DiffUtil</a></p>
<ul>
<li>DiffUtil是support-v7:24.2.0中的新工具类，它用来比较两个数据集，寻找出旧数据集-》新数据集的最小变化量。<br>说到数据集，相信大家知道它是和谁相关的了，就是我的最爱，RecyclerView。<br>就我使用的这几天来看，它最大的用处就是在RecyclerView刷新时，不再无脑mAdapter.notifyDataSetChanged()。</li>
</ul>
</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ActivityManager判断app运行状态]]></title>
      <url>http://yoursite.com/2017/02/28/android/ActivityManager%E6%A3%80%E6%B5%8BService%E4%B8%8EActivity%E6%98%AF%E5%90%A6%E6%AD%A3%E5%9C%A8%E8%BF%90%E8%A1%8C/</url>
      <content type="html"><![CDATA[<blockquote>
<p>摘要: 在后台与网络交互中，需要使用Service来和服务器保持连接，因此Service在被进程Kill掉后，主动开启Service是必要的，因此首先的检测Service是否已启动</p>
</blockquote>
<h3 id="检测Service是否已启动"><a href="#检测Service是否已启动" class="headerlink" title="检测Service是否已启动"></a>检测Service是否已启动</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isServiceRunning</span><span class="params">(String serviceClassName)</span></span>&#123;</div><div class="line">    <span class="keyword">final</span> ActivityManager activityManager = (ActivityManager)Application.getContext().getSystemService(Context.ACTIVITY_SERVICE);</div><div class="line">    <span class="keyword">final</span> List&lt;RunningServiceInfo&gt; services = activityManager.getRunningServices(Integer.MAX_VALUE);</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (RunningServiceInfo runningServiceInfo : services) &#123;</div><div class="line">        <span class="keyword">if</span> (runningServiceInfo.service.getClassName().equals(serviceClassName))&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<h3 id="检测Activity是否已启动"><a href="#检测Activity是否已启动" class="headerlink" title="检测Activity是否已启动"></a>检测Activity是否已启动</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 权限--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.GET_TASKS"</span>/&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">ActivityManager am = (ActivityManager)context.getSystemService(Context.ACTIVITY_SERVICE);</div><div class="line">List&lt;RunningTaskInfo&gt; list = am.getRunningTasks(<span class="number">100</span>);</div><div class="line"><span class="keyword">boolean</span> isAppRunning = <span class="keyword">false</span>;</div><div class="line">String MY_PKG_NAME = <span class="string">"com.cyberblue.iitag"</span>;</div><div class="line"><span class="keyword">for</span> (RunningTaskInfo info : list) &#123;</div><div class="line">	<span class="keyword">if</span> (info.topActivity.getPackageName().equals(MY_PKG_NAME) || info.baseActivity.getPackageName().equals(MY_PKG_NAME)) &#123;</div><div class="line">		isAppRunning = <span class="keyword">true</span>;</div><div class="line">		Log.i(TAG,info.topActivity.getPackageName() + <span class="string">" info.baseActivity.getPackageName()="</span>+info.baseActivity.getPackageName());</div><div class="line">		<span class="keyword">break</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span>  <span class="keyword">boolean</span> <span class="title">isLauncherRunnig</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">boolean</span> result = <span class="keyword">false</span> ;</div><div class="line">        List&lt;String&gt; names = getAllTheLauncher();</div><div class="line">        ActivityManager mActivityManager = (ActivityManager) context.getSystemService(Context.ACTIVITY_SERVICE) ;</div><div class="line">        List&lt;ActivityManager.RunningAppProcessInfo&gt; appList = mActivityManager.getRunningAppProcesses() ;</div><div class="line">        <span class="keyword">for</span> (RunningAppProcessInfo running : appList) &#123;</div><div class="line">                <span class="keyword">if</span> (running.importance == RunningAppProcessInfo.IMPORTANCE_FOREGROUND) &#123;</div><div class="line">                        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; names.size(); i++) &#123;</div><div class="line">                                <span class="keyword">if</span> (names.get(i).equals(running.processName)) &#123;</div><div class="line">                                        result = <span class="keyword">true</span> ;</div><div class="line">                                        <span class="keyword">break</span>;</div><div class="line">                                &#125;</div><div class="line">                        &#125;</div><div class="line">                &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result ;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="判断App是否运行"><a href="#判断App是否运行" class="headerlink" title="判断App是否运行"></a>判断App是否运行</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">   <span class="comment">/**</span></div><div class="line"> * 判断app是否正在运行</div><div class="line"> * <span class="doctag">@param</span> ctx</div><div class="line"> * <span class="doctag">@param</span> packageName</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">appIsRunning</span><span class="params">(Context ctx,String packageName)</span></span></div><div class="line">&#123;</div><div class="line">	ActivityManager am = (ActivityManager) ctx.getSystemService(ACTIVITY_SERVICE);</div><div class="line"></div><div class="line">	List&lt;RunningAppProcessInfo&gt; runningAppProcesses = am.getRunningAppProcesses();</div><div class="line"></div><div class="line">	<span class="keyword">if</span>(runningAppProcesses!=<span class="keyword">null</span>)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">for</span> (RunningAppProcessInfo runningAppProcessInfo : runningAppProcesses) &#123;</div><div class="line"></div><div class="line">			<span class="keyword">if</span>(runningAppProcessInfo.processName.startsWith(packageName))</div><div class="line">			&#123;</div><div class="line">				<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * app 是否在后台运行</div><div class="line"> * <span class="doctag">@param</span> ctx</div><div class="line"> * <span class="doctag">@param</span> packageName</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">appIsBackgroundRunning</span><span class="params">(Context ctx,String packageName)</span></span></div><div class="line">&#123;</div><div class="line">	ActivityManager am = (ActivityManager) ctx.getSystemService(ACTIVITY_SERVICE);</div><div class="line"></div><div class="line">	List&lt;RunningAppProcessInfo&gt; runningAppProcesses = am.getRunningAppProcesses();</div><div class="line"></div><div class="line">	<span class="keyword">if</span>(runningAppProcesses!=<span class="keyword">null</span>)</div><div class="line">	&#123;</div><div class="line">		<span class="keyword">for</span> (RunningAppProcessInfo runningAppProcessInfo : runningAppProcesses) &#123;</div><div class="line"></div><div class="line">			<span class="keyword">if</span>(runningAppProcessInfo.processName.startsWith(packageName))</div><div class="line">			&#123;</div><div class="line">				<span class="keyword">return</span> runningAppProcessInfo.importance!=RunningAppProcessInfo.IMPORTANCE_FOREGROUND &amp;&amp; runningAppProcessInfo.importance!=RunningAppProcessInfo.IMPORTANCE_VISIBLE; <span class="comment">//排除无界面的app</span></div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[合并已经排序的2条链表(day11)]]></title>
      <url>http://yoursite.com/2017/02/13/everydayc/day11/</url>
      <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><ul>
<li>合并2条链表<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">如 1，3，5，7 和 2，4，6，8 -&gt; 1,2,3,4,5,6,7,8</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function">ListNode * <span class="title">mergeList</span><span class="params">(ListNode* list1, ListNode* list2)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(!list1) <span class="keyword">return</span> list2;</div><div class="line">    <span class="keyword">if</span>(!list2) <span class="keyword">return</span> list1;</div><div class="line">    ListNode* head;</div><div class="line">    ListNode* tail = <span class="keyword">new</span> ListNode();</div><div class="line">    head = tail;</div><div class="line">    <span class="keyword">while</span>(list1 || list2) &#123;</div><div class="line">        <span class="keyword">if</span>(!list2 || list1-&gt;value &lt; list2-&gt;value) &#123;</div><div class="line">            tail-&gt;next = list1;</div><div class="line">            tail=tail-&gt;next;</div><div class="line">            list1=list1-&gt;next;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            tail-&gt;next=list2;</div><div class="line">            tail=tail-&gt;next;</div><div class="line">            list2=list2-&gt;next;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> head-&gt;next;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//使用递归</span></div><div class="line"><span class="function">ListNode * <span class="title">mergeList2</span><span class="params">(ListNode* list1, ListNode* list2)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(!list1) <span class="keyword">return</span> list2;</div><div class="line">    <span class="keyword">if</span>(!list2) <span class="keyword">return</span> list1;</div><div class="line">    ListNode* head;</div><div class="line">    <span class="keyword">if</span>(list1-&gt;value &lt; list2-&gt;value)&#123;</div><div class="line">        head = list1;</div><div class="line">        head-&gt;next = mergeList2(list1-&gt;next, list2);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">        head = list2;</div><div class="line">        head-&gt;next = mergeList2(list1,list2-&gt;next);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> head;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="https://github.com/SanfenR/EveryDayC" target="_blank" rel="external">源码传送门</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[打印1到最大的n位数(day10)]]></title>
      <url>http://yoursite.com/2017/01/20/everydayc/day10/</url>
      <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><ul>
<li>打印1到最大的n位数。如n=4，打印1-9999。</li>
</ul>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ul>
<li>如果直接使用循环会导致int或者long都不够存储，因此使用string来存储数据，这里涉及到字符串以及字符串的加法。</li>
</ul>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;n)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">char</span> *number = <span class="keyword">new</span> <span class="keyword">char</span>[n + <span class="number">1</span>];</div><div class="line">    <span class="built_in">memset</span>(number, <span class="string">'0'</span>, (n + <span class="number">1</span>) * <span class="keyword">sizeof</span>(<span class="keyword">char</span>));</div><div class="line">    number[n] = <span class="string">'\0'</span>;</div><div class="line"></div><div class="line">    printMax(number, <span class="number">0</span>, n);</div><div class="line"></div><div class="line">    <span class="keyword">delete</span>[] number;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">printMax</span><span class="params">(<span class="keyword">char</span> *number, <span class="keyword">const</span> <span class="keyword">int</span> index, <span class="keyword">const</span> <span class="keyword">int</span> size)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!number)</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">if</span> (index == size) &#123;<span class="comment">//嵌套截止条件</span></div><div class="line">        <span class="built_in">cout</span> &lt;&lt; number &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">        number[index] = (<span class="keyword">char</span>) (i + <span class="string">'0'</span>);<span class="comment">//index---当前调整的位数</span></div><div class="line">        printMax(number, index + <span class="number">1</span>, size);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="https://github.com/SanfenR/EveryDayC" target="_blank" rel="external">源码传送门</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android-Fragment懒加载]]></title>
      <url>http://yoursite.com/2017/01/11/android/lazyfragment%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h2 id="ViewPager的预加载"><a href="#ViewPager的预加载" class="headerlink" title="ViewPager的预加载"></a>ViewPager的预加载</h2><p>在项目中，经常会遇到ViewPager+TabLayout实现对多个fragment的管理。但是由于ViewPager的预加载(默认的预加载为1)，viewpager会调用fragment的onCreateView()进行fragmemt的初始化:</p>
<p><img src="http://ohqvqufyf.bkt.clouddn.com/fragment.png" alt="fragment"></p>
<p>而在Android中当fragment的onCreateView()会将整个xml文件中的UI控件实例到内存，而且数据的请求初始化基本也是在onCreateView()中进行。导致App启动的时候加载的数据过多。</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>解决这个问题有两种方式，一种是禁止ViewPager的预加载，重写ViewPager,但是该方法会出现左右滑动时会出现卡顿现象，带来不好的用户体验。而另外一种就是我们接下来要讲的通过Fragment的懒加载来实现。当用户切换到某个fragment时再加载。</p>
<h3 id="setUserVisibleHint-方法"><a href="#setUserVisibleHint-方法" class="headerlink" title="setUserVisibleHint()方法"></a>setUserVisibleHint()方法</h3><p>懒加载主要使用到fragment中的setUserVisibleHint()，这个方法是当fragment的UI显示状态变化时会被调用。源码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Set a hint to the system about whether this fragment's UI is currently visible</div><div class="line"> * to the user. This hint defaults to true and is persistent across fragment instance</div><div class="line"> * state save and restore.</div><div class="line"> *</div><div class="line"> * &lt;p&gt;An app may set this to false to indicate that the fragment's UI is</div><div class="line"> * scrolled out of visibility or is otherwise not directly visible to the user.</div><div class="line"> * This may be used by the system to prioritize operations such as fragment lifecycle updates</div><div class="line"> * or loader ordering behavior.&lt;/p&gt;</div><div class="line"> *</div><div class="line"> * &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This method may be called outside of the fragment lifecycle.</div><div class="line"> * and thus has no ordering guarantees with regard to fragment lifecycle method calls.&lt;/p&gt;</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> isVisibleToUser true if this fragment's UI is currently visible to the user (default),</div><div class="line"> *                        false if it is not.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserVisibleHint</span><span class="params">(<span class="keyword">boolean</span> isVisibleToUser)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!mUserVisibleHint &amp;&amp; isVisibleToUser &amp;&amp; mState &lt; STARTED</div><div class="line">            &amp;&amp; mFragmentManager != <span class="keyword">null</span> &amp;&amp; isAdded()) &#123;</div><div class="line">        mFragmentManager.performPendingDeferredStart(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">    mUserVisibleHint = isVisibleToUser;</div><div class="line">    mDeferStart = mState &lt; STARTED &amp;&amp; !isVisibleToUser;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><ol>
<li>因为fragment的onCreateView()方法会将xml中的控件加载到内存中，所以我们定义一个空的FragmentLayout。</li>
</ol>
<p>创建一个空的容器作为预加载界面<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">FrameLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/other_frame"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">"com.mz.sanfen.lazyfragment.OtherFragment"</span>&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">FrameLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>并在onCreateView()中初始化这个布局</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Nullable</span></div><div class="line"> <span class="meta">@Override</span></div><div class="line"> <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">     <span class="comment">// Inflate the layout for this fragment</span></div><div class="line">     View inflate = inflater.inflate(R.layout.fragment_other, container, <span class="keyword">false</span>);</div><div class="line">     frameLayout = (FrameLayout) inflate.findViewById(R.id.one_frame);</div><div class="line">     Log.e(TAG, <span class="string">"onCreateView: "</span> + frameLayout );</div><div class="line">     <span class="keyword">return</span> inflate;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<ol>
<li>将具体的内容的UI定义到一个子xml中，并在setUserVisibleHint()方法中进行初始化控件和数据加载，并将这个xml放入外部的容器中。</li>
</ol>
<p>重新创建一个子布局<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/other_text"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"@string/hello_blank_fragment"</span> /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>并在setUserVisibleHint()中进行初始化<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserVisibleHint</span><span class="params">(<span class="keyword">boolean</span> isVisibleToUser)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.setUserVisibleHint(isVisibleToUser);</div><div class="line"><span class="comment">//        Log.e(TAG, "setUserVisibleHint: " + isVisibleToUser );</span></div><div class="line">        <span class="keyword">if</span> (isVisibleToUser) &#123;</div><div class="line">            <span class="keyword">if</span> (contentView == <span class="keyword">null</span> ) &#123;</div><div class="line">                contentView = LayoutInflater.from(getActivity()).inflate(R.layout.content_other, frameLayout, <span class="keyword">true</span>);</div><div class="line">                textView = (TextView) contentView.findViewById(R.id.other_text);</div><div class="line">                textView.setText(<span class="string">"load other fragment"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>ViewPager在预加载fragment的时候是先调用setUserVisibleHint(), 然后再是调用onCreateView()方法。</p>
<p><img src="http://ohqvqufyf.bkt.clouddn.com/load.png" alt="image"></p>
<p><a href="https://github.com/SanfenR/AndroidSenior/tree/master/lazyfragment" target="_blank" rel="external">源码传送门</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[和为n的连续正数序列(day9)]]></title>
      <url>http://yoursite.com/2017/01/08/everydayc/day9/</url>
      <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><ul>
<li>题目：输入一个正数n，输出所有和为n 连续正数序列。<br>例如输入15，由于1+2+3+4+5=4+5+6=7+8=15，<br>所以输出3 个连续序列1-5、4-6 和7-8。</li>
</ul>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol>
<li>对于固定的left.当前sum值小于目标Sum，则right一直后移</li>
<li>sum==Sum。则输出序列，且将right后移</li>
<li>对于固定的right.,sum&gt;Sum时，始终将left左移动</li>
</ol>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;left, <span class="keyword">const</span> <span class="keyword">int</span> &amp;right)</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">int</span> flag = <span class="number">0</span>;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"NO:"</span> &lt;&lt; ++flag &lt;&lt; <span class="string">"--"</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = left; i &lt;= right; ++i) &#123;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">" "</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">findSequence</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;Sum)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> left = <span class="number">1</span>, right = <span class="number">1</span>, sum = <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span> (left &lt;= Sum / <span class="number">2</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (sum == Sum) &#123;</div><div class="line">            print(left, right);</div><div class="line">            right++;</div><div class="line">            sum += right;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum &gt; Sum) &#123;</div><div class="line">            sum -= left;</div><div class="line">            left++;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            right++;</div><div class="line">            sum += right;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>简略写法：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">findSequence</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; Sum)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> left =<span class="number">1</span>, right = <span class="number">1</span>, sum = <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span>(left &lt;= Sum/<span class="number">2</span>) &#123;</div><div class="line">        <span class="keyword">while</span> (sum &gt; Sum) &#123;</div><div class="line">            sum -= left;</div><div class="line">            left ++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (sum == Sum) &#123;</div><div class="line">            print(left, right);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        right ++;</div><div class="line">        sum += right;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><ul>
<li>题目：输入两个整数n和m，从数列1,2,3…n中随意取几个数，使其和等于m，要求列出所有的组合。</li>
</ul>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; list1;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">find_factor</span><span class="params">(<span class="keyword">int</span> sum, <span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">    <span class="comment">//递归出口</span></div><div class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">0</span> || sum &lt; <span class="number">0</span>)</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    <span class="comment">//输出找到的数</span></div><div class="line">    <span class="keyword">if</span> (sum == n) &#123;</div><div class="line">        list1.reverse();</div><div class="line">        <span class="keyword">for</span> (<span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;::iterator iter = list1.begin(); iter != list1.end(); iter++)</div><div class="line">            <span class="built_in">cout</span> &lt;&lt; *iter &lt;&lt; <span class="string">" + "</span>;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; n &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">        list1.reverse();</div><div class="line">    &#125;</div><div class="line">    list1.push_front(n);</div><div class="line">    find_factor(sum - n, n - <span class="number">1</span>);<span class="comment">//n参与查找</span></div><div class="line">    list1.pop_front();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="https://github.com/SanfenR/EveryDayC" target="_blank" rel="external">源码传送门</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android动态修改icon]]></title>
      <url>http://yoursite.com/2017/01/07/android/Android%E5%8A%A8%E6%80%81%E4%BF%AE%E6%94%B9icon/</url>
      <content type="html"><![CDATA[<h2 id="activity-alias使用"><a href="#activity-alias使用" class="headerlink" title="activity-alias使用"></a>activity-alias使用</h2><ol>
<li><p>以前装应用的时候有些应用会在桌面上生成两个图标,这两个图标有些是同一个Activity的入口,有些是另外一个Activity的入口,这样的效果是怎么实现的呢?在看Android原生DeskClock程序的时候看到了这个功能的实现.使用的是activity-alias：</p>
 <figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;activity-alias android:enabled=["true" | "false"]</div><div class="line">                android:exported=["true" | "false"]</div><div class="line">                android:icon="drawable resource"</div><div class="line">                android:label="string resource"</div><div class="line">                android:name="string"</div><div class="line">                android:permission="string"</div><div class="line">                android:targetActivity="string" &gt;</div><div class="line">    . . .</div><div class="line">&lt;/activity-alias&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>activity-alias中标记了一个名为android.intent.category.DESK_DOCK的category, 这个是在android设备插上桌面Dock底座的时候才会触发alias入口。设置:</p>
 <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DESK_DOCK"</span> /&gt;</span></div></pre></td></tr></table></figure>
<p> 实现app多入口登入。</p>
</li>
</ol>
<h3 id="manifest代码："><a href="#manifest代码：" class="headerlink" title="manifest代码："></a>manifest代码：</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">activity</span></span></div><div class="line">    <span class="attr">android:name</span>=<span class="string">".MainActivity"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">activity-alias</span></span></div><div class="line">    <span class="attr">android:name</span>=<span class="string">".icon_2"</span></div><div class="line">    <span class="attr">android:enabled</span>=<span class="string">"true"</span></div><div class="line">    <span class="attr">android:icon</span>=<span class="string">"@mipmap/steam_icon_72px"</span></div><div class="line">    <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span></div><div class="line">    <span class="attr">android:targetActivity</span>=<span class="string">".MainActivity"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DESK_DOCK"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">activity-alias</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="效果如下：app显示了2个应用图标"><a href="#效果如下：app显示了2个应用图标" class="headerlink" title="效果如下：app显示了2个应用图标"></a>效果如下：app显示了2个应用图标</h3><p><img src="http://ohqvqufyf.bkt.clouddn.com/icon.png" alt="icon"></p>
<h2 id="app实现动态修改icon"><a href="#app实现动态修改icon" class="headerlink" title="app实现动态修改icon"></a>app实现动态修改icon</h2><blockquote>
<p>了解完 <activity-alias>的基本知识之后，就知道动态修改桌面图标和应用名称是怎么做到的了。其实就是给整个应用的入口 Activity 添加一个 <activity-alias><br>标签，并设置预先设计好的替代桌面图标和应用名称，并配置相同的 <intent-filter><br>属性，动态启动即可。</intent-filter></activity-alias></activity-alias></p>
</blockquote>
<h3 id="manifest代码"><a href="#manifest代码" class="headerlink" title="manifest代码"></a>manifest代码</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">application</span></span></div><div class="line">    <span class="attr">android:allowBackup</span>=<span class="string">"true"</span></div><div class="line">    <span class="attr">android:icon</span>=<span class="string">"@mipmap/ic_launcher"</span></div><div class="line">    <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span></div><div class="line">    <span class="attr">android:supportsRtl</span>=<span class="string">"true"</span></div><div class="line">    <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">activity</span></span></div><div class="line">        <span class="attr">android:name</span>=<span class="string">".MainActivity"</span>&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span></div><div class="line">            <span class="comment">&lt;!--&lt;category android:name="android.intent.category.LAUNCHER" /&gt;--&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">activity-alias</span></span></div><div class="line">        <span class="attr">android:name</span>=<span class="string">".icon_1"</span></div><div class="line">        <span class="attr">android:enabled</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:icon</span>=<span class="string">"@mipmap/ic_launcher"</span></div><div class="line">        <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span></div><div class="line">        <span class="attr">android:targetActivity</span>=<span class="string">".MainActivity"</span>&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">activity-alias</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">activity-alias</span></span></div><div class="line">        <span class="attr">android:name</span>=<span class="string">".icon_2"</span></div><div class="line">        <span class="attr">android:enabled</span>=<span class="string">"false"</span></div><div class="line">        <span class="attr">android:icon</span>=<span class="string">"@mipmap/steam_icon_72px"</span></div><div class="line">        <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span></div><div class="line">        <span class="attr">android:targetActivity</span>=<span class="string">".MainActivity"</span>&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">activity-alias</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">application</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a>Java代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setIcon</span><span class="params">(<span class="keyword">int</span> useCode)</span></span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="comment">//要跟manifest的activity-alias 的name保持一致</span></div><div class="line">        String icon_1 = <span class="string">"com.mz.sanfen.appicon.icon_1"</span>;</div><div class="line">        String icon_2 = <span class="string">"com.mz.sanfen.appicon.icon_2"</span>;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (useCode != <span class="number">3</span>) &#123;</div><div class="line">            PackageManager pm = getPackageManager();</div><div class="line">            ComponentName normalComponentName = <span class="keyword">new</span> ComponentName(getBaseContext(), icon_1);</div><div class="line">            <span class="comment">//正常图标新状态</span></div><div class="line">            <span class="keyword">int</span> normalNewState = useCode == <span class="number">1</span> ? PackageManager.COMPONENT_ENABLED_STATE_ENABLED</div><div class="line">                    : PackageManager.COMPONENT_ENABLED_STATE_DISABLED;</div><div class="line">            <span class="keyword">if</span> (pm.getComponentEnabledSetting(normalComponentName) != normalNewState) &#123;<span class="comment">//新状态跟当前状态不一样才执行</span></div><div class="line">                pm.setComponentEnabledSetting(</div><div class="line">                        normalComponentName,</div><div class="line">                        normalNewState,</div><div class="line">                        PackageManager.DONT_KILL_APP);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            ComponentName actComponentName = <span class="keyword">new</span> ComponentName(getBaseContext(), icon_2);</div><div class="line">            <span class="comment">//正常图标新状态</span></div><div class="line">            <span class="keyword">int</span> actNewState = useCode == <span class="number">2</span> ? PackageManager.COMPONENT_ENABLED_STATE_ENABLED</div><div class="line">                    : PackageManager.COMPONENT_ENABLED_STATE_DISABLED;</div><div class="line">            <span class="keyword">if</span> (pm.getComponentEnabledSetting(actComponentName) != actNewState) &#123;<span class="comment">//新状态跟当前状态不一样才执行</span></div><div class="line">                pm.setComponentEnabledSetting(</div><div class="line">                        actComponentName,</div><div class="line">                        actNewState,</div><div class="line">                        PackageManager.DONT_KILL_APP);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在执行setIcon()之后，桌面会过一段时间显示新的图标，如果需要立即刷新图标，在执行setIcon()方法之后执行如下可以立即刷新。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_MAIN);</div><div class="line">intent.addCategory(Intent.CATEGORY_HOME);</div><div class="line">intent.addCategory(Intent.CATEGORY_DEFAULT);</div><div class="line">List&lt;ResolveInfo&gt; resolves = getPackageManager().queryIntentActivities(intent, <span class="number">0</span>);</div><div class="line"><span class="keyword">for</span> (ResolveInfo res : resolves) &#123;</div><div class="line">    <span class="keyword">if</span> (res.activityInfo != <span class="keyword">null</span>) &#123;</div><div class="line">        ActivityManager am = (ActivityManager) getSystemService(ACTIVITY_SERVICE);</div><div class="line">        am.killBackgroundProcesses(res.activityInfo.packageName);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="使用这个方法需要添加权限："><a href="#使用这个方法需要添加权限：" class="headerlink" title="使用这个方法需要添加权限："></a>使用这个方法需要添加权限：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;uses-permission android:name=<span class="string">"android.permission.KILL_BACKGROUND_PROCESSES"</span>/&gt;</div></pre></td></tr></table></figure>
<p>效果如下：</p>
<p><img src="http://ohqvqufyf.bkt.clouddn.com/changicon.gif" alt="image"></p>
<p><a href="https://github.com/SanfenR/AndroidSenior/tree/master/appicon" target="_blank" rel="external">源码传送门</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java中的阻塞队列]]></title>
      <url>http://yoursite.com/2017/01/01/java/BlockingQueue/</url>
      <content type="html"><![CDATA[<p><img src="http://ohqvqufyf.bkt.clouddn.com/blockingqueue.png" alt="image"></p>
<h2 id="JAVA中的几种主要的阻塞队列"><a href="#JAVA中的几种主要的阻塞队列" class="headerlink" title="JAVA中的几种主要的阻塞队列"></a>JAVA中的几种主要的阻塞队列</h2><ol>
<li>ArrayBlockingQueue: 基于数组实现的一个阻塞队列，在创建ArrayBlockingQueue对象必须指定容量大小。并且可以指定公平性和非公平性，默认情况下为非公平性，即不保存等待时间最长的队列有限能够访问队列。</li>
<li>LinkedBlockingQueue: 基于链表实现的一个阻塞队列，在创建LinkedBlockingQueue对象如果不指定容量大小，则为Integer.MAX_VALUE.</li>
<li>PriorityBlockingQueue: 以上2种队列都是先进先出队列，而PriorityBlockQueue却不是，它会按照元素的优先级对元素进行排序，按照优先级顺序出队，每次出队的元素都是优先级最高的元素。注意，此阻塞队列为无界阻塞队列，即容量没有上限。</li>
<li>DelayQueue: 基于PriorityBlockingQueue: 基于PriortyQueue, 一种延时阻塞队列，DelayQueue中的元素只有当其指定的延迟时间到了，才能够从队列中获取到该元素。DelayQueue也是一种无界队列，因此往队列中插入数据的操作（生产者）永远不会被阻塞，而只有获取数据的操作（消费者）才会被阻塞。</li>
</ol>
<h2 id="阻塞队列的几个方法"><a href="#阻塞队列的几个方法" class="headerlink" title="阻塞队列的几个方法"></a>阻塞队列的几个方法</h2><ol>
<li>put(E e): 向队尾存入元素，如果队列满了，则等待。</li>
<li>tack(): 从队首取元素，如果队伍为空，则等待。</li>
<li>offer(E e, long timeout, TimeUnil unit): 如果队列满了则等待一定时间，没有插入成功则返回false,成功则返回true.</li>
<li>poll(long timeout, TimeUnit unit): 如果队列为空，则等待一定时间，当时间期限达到时，如果未取到，则返回null.</li>
</ol>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><ul>
<li>阻塞队列实现</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlockingQueue</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> List&lt;Object&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> limit = <span class="number">10</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BlockingQueue</span><span class="params">(<span class="keyword">int</span> limit)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.limit = limit;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 当队列满了的时候阻塞线程</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> item</div><div class="line">     * <span class="doctag">@throws</span> InterruptedException</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(Object item)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">        <span class="keyword">while</span> (<span class="keyword">this</span>.queue.size() == <span class="keyword">this</span>.limit) &#123;</div><div class="line">            wait();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.queue.size() &lt; <span class="keyword">this</span>.limit) &#123;</div><div class="line">            notifyAll();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">this</span>.queue.add(item);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 当队列为空的时候阻塞线程</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     * <span class="doctag">@throws</span> InterruptedException</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> Object <span class="title">dequeue</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">        <span class="keyword">while</span> (<span class="keyword">this</span>.queue.size() == <span class="number">0</span>) &#123;</div><div class="line">            wait();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.queue.size() &gt; <span class="number">1</span>) &#123;</div><div class="line">            notifyAll();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.queue.remove(<span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>使用阻塞队列实现生产者消费者</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerConsumerPattern</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        BlockingQueue shareQueue = <span class="keyword">new</span> LinkedBlockingQueue&lt;&gt;();</div><div class="line"></div><div class="line">        Thread prodThread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Producer(shareQueue));</div><div class="line">        Thread consThread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Consumer(shareQueue));</div><div class="line"></div><div class="line">        prodThread.start();</div><div class="line">        consThread.start();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 生产者</div><div class="line">     */</div><div class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">final</span> BlockingQueue shareQueue;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Producer</span><span class="params">(BlockingQueue shareQueue)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.shareQueue = shareQueue;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</div><div class="line">                System.out.println(<span class="string">"Produced: "</span> + i);</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    shareQueue.put(i);</div><div class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 消费者</div><div class="line">     */</div><div class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">final</span> java.util.concurrent.BlockingQueue shareQueue;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Consumer</span><span class="params">(BlockingQueue shareQueue)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.shareQueue = shareQueue;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    System.out.println(<span class="string">"Consumer: "</span> + shareQueue.take());</div><div class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>使用Lock和Condition实现阻塞队列</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BoundedBuffer</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</div><div class="line">    <span class="keyword">final</span> Condition notFull = lock.newCondition();</div><div class="line">    <span class="keyword">final</span> Condition notEmpty = lock.newCondition();</div><div class="line"></div><div class="line">    <span class="keyword">final</span> Object[] items = <span class="keyword">new</span> Object[<span class="number">100</span>];</div><div class="line"></div><div class="line">    <span class="keyword">int</span> putptr, takeptr, count;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(Object x)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">        lock.lock();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">while</span> (count == items.length)</div><div class="line">                notFull.await();</div><div class="line">            items[putptr] = x;</div><div class="line">            <span class="keyword">if</span> (++putptr == items.length)</div><div class="line">                putptr = <span class="number">0</span>;</div><div class="line">            ++count;</div><div class="line">            notEmpty.signal();</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            lock.unlock();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">take</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">        lock.lock();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">while</span> (count == <span class="number">0</span>)</div><div class="line">                notEmpty.await();</div><div class="line">            Object x = items[takeptr];</div><div class="line">            <span class="keyword">if</span> (++takeptr == items.length)</div><div class="line">                takeptr = <span class="number">0</span>;</div><div class="line">            --count;</div><div class="line">            notFull.signal();</div><div class="line">            <span class="keyword">return</span> x;</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            lock.unlock();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="https://github.com/SanfenR/JavaNoob/tree/master/BlockingQueue" target="_blank" rel="external">源码传送门</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[最大数对差(day8)]]></title>
      <url>http://yoursite.com/2016/12/25/everydayc/day8/</url>
      <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><ul>
<li>题目：在数组中，数字减去它右边的数字得到一个数对之差。求所有数对之差的最大值。<br>例如在数组{2, 4, 1, 16, 7, 5, 11, 9}中，<br>数对之差的最大值是11，是16 减去5 的结果。</li>
</ul>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ul>
<li>Solution1: 将其转换成求最大子数组问题。引入辅助数组diff，长度为n-1。diff[i]=dif[i]-diff[i+1]。求出最大子数组以及位置low,high。则对应最大差为data[low]-data[high+1]。</li>
<li>Solution2: 使用动态规划法。假设data[i]减去某个数，其最大的数对差为currentMax。<br>则data[i-1]的最大数对差为data[i-1]-data[i]和data[i-1]-data[i]+currentMax中的较大的那一个。从后往前遍历数组，记录最大的currentMax以及对应的low、high输出即可。<br>时间复杂度O(n),空间复杂度O(1)。</li>
</ul>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> data[], <span class="keyword">int</span> size, <span class="keyword">int</span> &amp;low, <span class="keyword">int</span> &amp;high)</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> max = data[size - <span class="number">1</span>] - data[size - <span class="number">2</span>];<span class="comment">//最大的数对差</span></div><div class="line">    <span class="keyword">int</span> currentMax = data[size - <span class="number">1</span>] - data[size - <span class="number">2</span>];<span class="comment">//当前的数对差</span></div><div class="line"></div><div class="line">    <span class="keyword">int</span> l = size - <span class="number">2</span>;</div><div class="line">    <span class="keyword">int</span> h = size - <span class="number">1</span>;</div><div class="line">    low = l;<span class="comment">//被减数位置</span></div><div class="line">    high = h;<span class="comment">//减数位置</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = size - <span class="number">3</span>; i &gt;= <span class="number">0</span>; i--) &#123;</div><div class="line">        <span class="keyword">if</span> (currentMax &gt; <span class="number">0</span>) &#123;</div><div class="line">            currentMax = data[i] - data[i + <span class="number">1</span>] + currentMax;</div><div class="line">            l--;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            currentMax = data[i] - data[i + <span class="number">1</span>];</div><div class="line">            l = i;</div><div class="line">            h = i + <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (currentMax &gt; max) &#123;</div><div class="line">            low = l;</div><div class="line">            high = h;</div><div class="line">            max = currentMax;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> data[] = &#123;<span class="number">2</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">16</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">11</span>, <span class="number">9</span>&#125;;</div><div class="line">    <span class="keyword">int</span> low, high;</div><div class="line">    fun(data, <span class="keyword">sizeof</span>(data) / <span class="keyword">sizeof</span>(<span class="keyword">int</span>), low, high);</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"the max is "</span> &lt;&lt; data[low] - data[high] &lt;&lt; <span class="built_in">endl</span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="https://github.com/SanfenR/EveryDayC" target="_blank" rel="external">源码传送门</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android中Canvas绘图(Shader)]]></title>
      <url>http://yoursite.com/2016/12/22/android/Canvas%E4%B8%ADShader%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote>
<p>Shader就是着色器的意思。我们可以这样理解，Canvas中的各种drawXXX方法定义了图形的形状，画笔中的Shader则定义了图形的着色、外观，二者结合到一起就决定了最终Canvas绘制的被色彩填充的图形的样子。类android.graphics.Shader有五个子类，分别是：BitmapShader、LinearGradient、RadialGradient、SweepGradient和ComposeShader，下面依次对这几个类的使用分别说明。</p>
</blockquote>
<h3 id="BitmapShader"><a href="#BitmapShader" class="headerlink" title="BitmapShader"></a>BitmapShader</h3><ul>
<li>BitmapShader，用Bitmap对绘制的图形进行渲染着色，其实就是用图片对图形进行贴图。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//构造函数</span></div><div class="line">BitmapShader(Bitmap bitmap, Shader.TileMode tileX, Shader.TileMode tileY)</div></pre></td></tr></table></figure>
<ol>
<li>CLAMP: 当所画图形的尺寸大于Bitmap的尺寸的时候，会用Bitmap四边的颜色填充剩余空间。</li>
<li>REPEAT: 当我们绘制的图形尺寸大于Bitmap尺寸时，会用Bitmap重复平铺整个绘制的区域。</li>
<li>MIRROR: 当绘制的图形尺寸大于Bitmap尺寸时，MIRROR也会用Bitmap重复平铺整个绘图区域，与REPEAT不同的是，两个相邻的Bitmap互为镜像。</li>
</ol>
<p>实现代码:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> Shader.TileMode mDefaultTileMode = Shader.TileMode.REPEAT;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawBitmap</span><span class="params">()</span></span>&#123;</div><div class="line">    bitmap = BitmapFactory.decodeResource(getResources(), R.mipmap.music_player);</div><div class="line">    BitmapShader bitmapShader = <span class="keyword">new</span> BitmapShader(bitmap,</div><div class="line">            mDefaultTileMode,</div><div class="line">            mDefaultTileMode</div><div class="line">    );</div><div class="line">    mPaint.setShader(bitmapShader);</div><div class="line">&#125;</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">    canvas.drawRect(<span class="number">0</span>, <span class="number">0</span>,  canvas.getWidth(), canvas.getHeight(), mPaint);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>效果如下:<br><img width="180" src="http://ohqvqufyf.bkt.clouddn.com/2016-12-22%2015_28_26_bitmap.gif"></p>
<h3 id="LinearGradient"><a href="#LinearGradient" class="headerlink" title="LinearGradient"></a>LinearGradient</h3><ul>
<li><p>LinearGradient, 是用来创建线性渐变效果的，它是沿着某条直线的方向渐变的，坐标(x0,y0)就是这条渐变直线的起点，坐标(x1,y1)就是这条渐变直线的终点。需要说明的是，坐标(x0,y0)和坐标(x1,y1)都是Canvas绘图坐标系中的坐标。color0和color1分别表示了渐变的起始颜色和终止颜色。与BitmapShader类似，LinearGradient也支持TileMode。</p>
</li>
<li><p>LinearGradient有以下三个取值：CLAMP 、REPEAT 和 MIRROR</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">LinearGradient(<span class="keyword">float</span> x0, <span class="keyword">float</span> y0, <span class="keyword">float</span> x1, <span class="keyword">float</span> y1, <span class="keyword">int</span> color0, <span class="keyword">int</span> color1, Shader.TileMode tile)</div><div class="line">LinearGradient(<span class="keyword">float</span> x0, <span class="keyword">float</span> y0, <span class="keyword">float</span> x1, <span class="keyword">float</span> y1, <span class="keyword">int</span>[] colors, <span class="keyword">float</span>[] positions, Shader.TileMode tile)</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> Shader.TileMode mDefaultTileMode = Shader.TileMode.REPEAT;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">    canvas.drawRect(<span class="number">0</span>, <span class="number">0</span>, getWidth() ,  getHeight(), mPaint);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawLinear</span><span class="params">()</span></span>&#123;</div><div class="line">    LinearGradient linearGradient = <span class="keyword">new</span> LinearGradient(</div><div class="line">            <span class="number">0</span>, <span class="number">0</span>, getWidth() / <span class="number">4</span>, getHeight() / <span class="number">4</span>,</div><div class="line">            Color.GREEN,</div><div class="line">            Color.BLUE,</div><div class="line">            mDefaultTileMode</div><div class="line">    );</div><div class="line">    mPaint.setShader(linearGradient);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>效果如下：<br><img width="180" src="http://ohqvqufyf.bkt.clouddn.com/2016-12-22%2015_29_08_linear.gif"></p>
<h3 id="RadialGradient"><a href="#RadialGradient" class="headerlink" title="RadialGradient"></a>RadialGradient</h3><ul>
<li>RadialGradient 径向渐变，径向渐变说的简单点就是个圆形中心向四周渐变的效果</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">RadialGradient(<span class="keyword">float</span> centerX, <span class="keyword">float</span> centerY, <span class="keyword">float</span> radius, <span class="keyword">int</span> centerColor, <span class="keyword">int</span> edgeColor, Shader.TileMode tileMode)</div><div class="line"></div><div class="line">RadialGradient(<span class="keyword">float</span> centerX, <span class="keyword">float</span> centerY, <span class="keyword">float</span> radius, <span class="keyword">int</span>[] colors, <span class="keyword">float</span>[] stops, Shader.TileMode tileMode)</div></pre></td></tr></table></figure>
<p>RadialGradient是用来创建从中心向四周发散的辐射渐变效果的，所以我们需要在其构造函数中传入一些圆的参数，坐标(centerX,centerY)是圆心，即起始的中心颜色的位置，radius确定了圆的半径，在圆的半径处的颜色是edgeColor，这样就确定了当位置从圆心移向圆的轮廓时，颜色逐渐从centerColor渐变到edgeColor。RadialGradient也支持TileMode参数，有以下三个取值：CLAMP 、REPEAT 和 MIRROR。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">    canvas.drawRect(<span class="number">0</span> , <span class="number">0</span>, getWidth(), getHeight(), mPaint);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawRadial</span><span class="params">()</span></span>&#123;</div><div class="line">    RadialGradient radial = <span class="keyword">new</span> RadialGradient(</div><div class="line">            getWidth() / <span class="number">2</span>, getHeight() / <span class="number">2</span>, getWidth() / <span class="number">4</span>,</div><div class="line">            Color.YELLOW, Color.RED,</div><div class="line">            mDefaultTileMode</div><div class="line">    );</div><div class="line"></div><div class="line">    mPaint.setShader(radial);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>效果如下：<br><img width="180" src="http://ohqvqufyf.bkt.clouddn.com/2016-12-22%2015_30_05_radiol.gif"></p>
<h3 id="SweepGradient"><a href="#SweepGradient" class="headerlink" title="SweepGradient"></a>SweepGradient</h3><p>SweepGradient可以用来创建360度颜色旋转渐变效果，具体来说颜色是围绕中心点360度顺时针旋转的，起点就是3点钟位置。</p>
<ul>
<li>SweepGradient, 梯度渐变，也称之为扫描式渐变，因为其效果有点类似雷达的扫描效果.</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">SweepGradient(<span class="keyword">float</span> cx, <span class="keyword">float</span> cy, <span class="keyword">int</span> color0, <span class="keyword">int</span> color1)</div><div class="line">SweepGradient(<span class="keyword">float</span> cx, <span class="keyword">float</span> cy, <span class="keyword">int</span>[] colors, <span class="keyword">float</span>[] positions)</div></pre></td></tr></table></figure>
<p>SweepGradient不支持TileMode参数, 坐标(cx,cy)决定了中心点的位置，会绕着该中心点进行360度旋转。color0表示的是起点的颜色位置，color1表示的是终点的颜色位置。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">    canvas.drawCircle(getWidth() / <span class="number">2</span>, getHeight() / <span class="number">2</span>, getWidth() / <span class="number">4</span>, mPaint);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawSweep</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="comment">//SweepGradient sweep = new SweepGradient(getWidth() /2, getHeight() / 2, Color.GREEN, Color.BLUE);</span></div><div class="line">    <span class="keyword">int</span>[] colors = &#123;Color.RED, Color.WHITE, Color.YELLOW&#125;;</div><div class="line">    <span class="keyword">float</span>[] positions = &#123;<span class="number">0f</span>, <span class="number">0.75f</span>, <span class="number">0f</span>&#125;;</div><div class="line">    SweepGradient sweep = <span class="keyword">new</span> SweepGradient(getWidth() / <span class="number">2</span> , getHeight() / <span class="number">2</span>, colors, positions);</div><div class="line"></div><div class="line">    mPaint.setShader(sweep);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>效果如下：<br><img width="180" src="http://ohqvqufyf.bkt.clouddn.com/2016-12-22%2015_30_42_sweep.gif"></p>
<p><a href="https://github.com/SanfenR/AndroidSenior/tree/master/canvasshader" target="_blank" rel="external">源码传送门</a></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://blog.csdn.net/aigestudio/article/details/41799811" target="_blank" rel="external">自定义控件其实很简单1/3</a></p>
<p><a href="http://blog.csdn.net/iispring/article/details/50500106" target="_blank" rel="external">Android中Canvas绘图之Shader使用图文详解</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[二叉树中找出和为某一值的所有路径(day7)]]></title>
      <url>http://yoursite.com/2016/12/21/everydayc/day7/</url>
      <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><ul>
<li>题目：输入一个整数和一棵二元树。从树的根结点开始往下访问一直到叶结点所经过的所有结点形成一条路径。打印出和与输入整数相等的所有路径。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"> 例如输入整数22 和如下二元树</div><div class="line"></div><div class="line">      10</div><div class="line">     /  \</div><div class="line">    5   12</div><div class="line">   / \</div><div class="line">  4   7</div><div class="line"></div><div class="line">则打印出两条路径：10, 12 和10, 5, 7。</div></pre></td></tr></table></figure>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ul>
<li>使用递归和栈结构。将当前路径保留在vector中。</li>
</ul>
<ol>
<li>对于空节点，返回false；</li>
<li>对于叶子节点，判断当前和是否为给定值，是则遍历输出栈中保存路径且返回true，否则返回false。</li>
<li>对于非叶子节点，将当前根节点入栈，先后递归左、右子树。且递归完后，要弹出栈中保存的当前路径。</li>
</ol>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> Node &#123;</div><div class="line">    <span class="keyword">int</span> value;</div><div class="line">    Node* left;</div><div class="line">    Node* right;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">decision</span><span class="params">(Node * head, <span class="keyword">int</span> sum, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;v)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(!head)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!head-&gt;left &amp;&amp; !head-&gt;right)&#123;</div><div class="line">        sum -= head-&gt;value;</div><div class="line">        <span class="keyword">if</span>(sum == <span class="number">0</span>)&#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v.size(); i++) &#123;</div><div class="line">                <span class="built_in">cout</span> &lt;&lt; v[i] &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">cout</span> &lt;&lt; head-&gt;value &lt;&lt; <span class="string">"\n"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        v.push_back(head-&gt;value);</div><div class="line">        sum -= head-&gt;value;</div><div class="line">        <span class="keyword">bool</span> left = decision(head-&gt;left, sum, v);</div><div class="line">        <span class="keyword">bool</span> right = decision(head-&gt;right, sum, v);</div><div class="line">        v.pop_back();</div><div class="line">        <span class="keyword">if</span> (left || right)&#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    Node n4=&#123;<span class="number">4</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>&#125;;</div><div class="line">    Node n5=&#123;<span class="number">7</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>&#125;;</div><div class="line">    Node n3=&#123;<span class="number">12</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>&#125;;</div><div class="line">    Node n2=&#123;<span class="number">5</span>,&amp;n4,&amp;n5&#125;;</div><div class="line">    Node n1=&#123;<span class="number">10</span>,&amp;n2,&amp;n3&#125;;</div><div class="line"></div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</div><div class="line">    decision(&amp;n1,<span class="number">22</span>,v);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="https://github.com/SanfenR/EveryDayC" target="_blank" rel="external">源码github</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[java线程池源码分析]]></title>
      <url>http://yoursite.com/2016/12/14/java/java-exectors/</url>
      <content type="html"><![CDATA[<h2 id="在什么情况下使用线程池"><a href="#在什么情况下使用线程池" class="headerlink" title="在什么情况下使用线程池"></a>在什么情况下使用线程池</h2><ol>
<li>单个任务处理的时间比较短</li>
<li>将需处理的任务的数量大</li>
</ol>
<h2 id="使用线程池的好处"><a href="#使用线程池的好处" class="headerlink" title="使用线程池的好处"></a>使用线程池的好处</h2><ol>
<li>减少在创建和销毁线程上所花的时间以及系统资源的开销</li>
<li>如不使用线程池，有可能造成系统创建大量线程而导致消耗完系统内存以及”过度切换”</li>
</ol>
<h2 id="案例1"><a href="#案例1" class="headerlink" title="案例1"></a>案例1</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Executor executor = Executors.newFixedThreadPool(<span class="number">10</span>);</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++)&#123;</div><div class="line">            executor.execute(<span class="keyword">new</span> Task());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Task</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</div><div class="line">            System.out.println(Thread.currentThread().getName());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>Executor.newFixedThreadPool(10)初始化一个包含10个线程的executor;</li>
<li>通过executor.execute方法提交20个任务</li>
<li>负责执行任务的生命周期都由Executor框架进行管理</li>
</ol>
<h2 id="ThreadPoolExecutor"><a href="#ThreadPoolExecutor" class="headerlink" title="ThreadPoolExecutor"></a>ThreadPoolExecutor</h2><p>Executor是java线程池的工厂类**，通过它可以快速初始化一个符合业务需求的线程池，如Excutor.newFixedThreadPool方法可以生成一个拥有固定线程数的线程池。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Creates a new &#123;<span class="doctag">@code</span> ThreadPoolExecutor&#125; with the given initial</div><div class="line"> * parameters and default thread factory and rejected execution handler.</div><div class="line"> * It may be more convenient to use one of the &#123;<span class="doctag">@link</span> Executors&#125; factory</div><div class="line"> * methods instead of this general purpose constructor.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> corePoolSize the number of threads to keep in the pool, even</div><div class="line"> *        if they are idle, unless &#123;<span class="doctag">@code</span> allowCoreThreadTimeOut&#125; is set</div><div class="line"> * <span class="doctag">@param</span> maximumPoolSize the maximum number of threads to allow in the</div><div class="line"> *        pool</div><div class="line"> * <span class="doctag">@param</span> keepAliveTime when the number of threads is greater than</div><div class="line"> *        the core, this is the maximum time that excess idle threads</div><div class="line"> *        will wait for new tasks before terminating.</div><div class="line"> * <span class="doctag">@param</span> unit the time unit for the &#123;<span class="doctag">@code</span> keepAliveTime&#125; argument</div><div class="line"> * <span class="doctag">@param</span> workQueue the queue to use for holding tasks before they are</div><div class="line"> *        executed.  This queue will hold only the &#123;<span class="doctag">@code</span> Runnable&#125;</div><div class="line"> *        tasks submitted by the &#123;<span class="doctag">@code</span> execute&#125; method.</div><div class="line"> * <span class="doctag">@throws</span> IllegalArgumentException if one of the following holds:&lt;br&gt;</div><div class="line"> *         &#123;<span class="doctag">@code</span> corePoolSize &lt; 0&#125;&lt;br&gt;</div><div class="line"> *         &#123;<span class="doctag">@code</span> keepAliveTime &lt; 0&#125;&lt;br&gt;</div><div class="line"> *         &#123;<span class="doctag">@code</span> maximumPoolSize &lt;= 0&#125;&lt;br&gt;</div><div class="line"> *         &#123;<span class="doctag">@code</span> maximumPoolSize &lt; corePoolSize&#125;</div><div class="line"> * <span class="doctag">@throws</span> NullPointerException if &#123;<span class="doctag">@code</span> workQueue&#125; is null</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></div><div class="line">                          <span class="keyword">int</span> maximumPoolSize,</div><div class="line">                          <span class="keyword">long</span> keepAliveTime,</div><div class="line">                          TimeUnit unit,</div><div class="line">                          BlockingQueue&lt;Runnable&gt; workQueue) &#123;</div><div class="line">    <span class="keyword">this</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,</div><div class="line">         Executors.defaultThreadFactory(), defaultHandler);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其本质是通过不同的参数初始化一个ThreadPoolExecutor对象，具体参数描述如下：</p>
<h3 id="corePoolSize"><a href="#corePoolSize" class="headerlink" title="corePoolSize"></a>corePoolSize</h3><p>线程池中的核心线程数，当提交一个任务时，线程池创建一个新线程执行任务，直到当前线程数等于corePoolSize；如果当前线程数为corePoolSize，继续提交的任务被保存到阻塞队列中，等待被执行；如果执行了线程池的prestartAllCoreThreads()方法，线程池会提前创建并启动所有核心线程。</p>
<h3 id="maximumPoolSize"><a href="#maximumPoolSize" class="headerlink" title="maximumPoolSize"></a>maximumPoolSize</h3><p>线程池中允许的最大线程数。如果当前阻塞队列满了，且继续提交任务，则创建新的线程执行任务，前提是当前线程数小于maximumPoolSize。</p>
<h3 id="keepAliveTime"><a href="#keepAliveTime" class="headerlink" title="keepAliveTime"></a>keepAliveTime</h3><p>线程空闲时的存活时间，即当线程没有任务执行时，继续存活的时间；默认情况下，该参数只在线程数大于corePoolSize时才有用。</p>
<h3 id="unit"><a href="#unit" class="headerlink" title="unit"></a>unit</h3><p>keepAliveTime的单位。</p>
<h3 id="workQueue"><a href="#workQueue" class="headerlink" title="workQueue"></a>workQueue</h3><p>用来保存等待被执行的任务的阻塞队列，且任务必须实现Runable接口，在JDK中提供了如下阻塞队列：</p>
<ol>
<li>ArrayBlockingQueue：基于数组结构的有界阻塞队列，按FIFO排序任务；</li>
<li>LinkedBlockingQuene：基于链表结构的阻塞队列，按FIFO排序任务，吞吐量通常要高于ArrayBlockingQuene；</li>
<li>SynchronousQuene：一个不存储元素的阻塞队列，每个插入操作必须等到另一个线程调用移除操作，否则插入操作一直处于阻塞状态，吞吐量通常要高于LinkedBlockingQuene；</li>
<li>priorityBlockingQuene：具有优先级的无界阻塞队列；</li>
</ol>
<h3 id="threadFactory"><a href="#threadFactory" class="headerlink" title="threadFactory"></a>threadFactory</h3><p>创建线程的工厂，通过自定义的线程工厂可以给每个新建的线程设置一个具有识别度的线程名。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">DefaultThreadFactory() &#123;</div><div class="line">            SecurityManager s = System.getSecurityManager();</div><div class="line">            group = (s != <span class="keyword">null</span>) ? s.getThreadGroup() :</div><div class="line">                                  Thread.currentThread().getThreadGroup();</div><div class="line">            namePrefix = <span class="string">"pool-"</span> +</div><div class="line">                          poolNumber.getAndIncrement() +</div><div class="line">                         <span class="string">"-thread-"</span>;</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<h3 id="handler"><a href="#handler" class="headerlink" title="handler"></a>handler</h3><p>线程池的饱和策略，当阻塞队列满了，且没有空闲的工作线程，如果继续提交任务，必须采取一种策略处理该任务，线程池提供了4种策略：</p>
<ol>
<li>AbortPolicy：直接抛出异常，默认策略；</li>
<li>CallerRunsPolicy：用调用者所在的线程来执行任务；</li>
<li>DiscardOldestPolicy：丢弃阻塞队列中靠最前的任务，并执行当前任务；</li>
<li>DiscardPolicy：直接丢弃任务；</li>
</ol>
<p>当然也可以根据应用场景实现RejectedExecutionHandler接口，自定义饱和策略，如记录日志或持久化存储不能处理的任务。</p>
<h2 id="Exectors"><a href="#Exectors" class="headerlink" title="Exectors"></a>Exectors</h2><p>Exectors工厂类提供了线程池的初始化接口，主要有如下几种:</p>
<h3 id="newFixedThreadPool"><a href="#newFixedThreadPool" class="headerlink" title="newFixedThreadPool"></a>newFixedThreadPool</h3><p>初始化一个指定线程数的线程池，其中corePoolSize == maximumPoolSize，使用LinkedBlockingQuene作为阻塞队列，不过当线程池没有可执行任务时，也不会释放线程。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * Creates a thread pool that reuses a fixed number of threads</div><div class="line">    * operating off a shared unbounded queue.  At any point, at most</div><div class="line">    * &#123;<span class="doctag">@code</span> nThreads&#125; threads will be active processing tasks.</div><div class="line">    * If additional tasks are submitted when all threads are active,</div><div class="line">    * they will wait in the queue until a thread is available.</div><div class="line">    * If any thread terminates due to a failure during execution</div><div class="line">    * prior to shutdown, a new one will take its place if needed to</div><div class="line">    * execute subsequent tasks.  The threads in the pool will exist</div><div class="line">    * until it is explicitly &#123;<span class="doctag">@link</span> ExecutorService#shutdown shutdown&#125;.</div><div class="line">    *</div><div class="line">    * <span class="doctag">@param</span> nThreads the number of threads in the pool</div><div class="line">    * <span class="doctag">@return</span> the newly created thread pool</div><div class="line">    * <span class="doctag">@throws</span> IllegalArgumentException if &#123;<span class="doctag">@code</span> nThreads &lt;= 0&#125;</div><div class="line">    */</div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newFixedThreadPool</span><span class="params">(<span class="keyword">int</span> nThreads)</span> </span>&#123;</div><div class="line">       <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(nThreads, nThreads,</div><div class="line">                                     <span class="number">0L</span>, TimeUnit.MILLISECONDS,</div><div class="line">                                     <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;());</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<h3 id="newCachedThreadPool"><a href="#newCachedThreadPool" class="headerlink" title="newCachedThreadPool"></a>newCachedThreadPool</h3><ol>
<li>初始化一个可以缓存线程的线程池，默认缓存60s，线程池的线程数可达到Integer.MAX_VALUE，即2147483647，内部使用SynchronousQueue作为阻塞队列；</li>
<li>和newFixedThreadPool创建的线程池不同，newCachedThreadPool在没有任务执行时，当线程的空闲时间超过keepAliveTime，会自动释放线程资源，当提交新任务时，如果没有空闲线程，则创建新线程执行任务，会导致一定的系统开销;</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">  * Creates a thread pool that creates new threads as needed, but</div><div class="line">  * will reuse previously constructed threads when they are</div><div class="line">  * available.  These pools will typically improve the performance</div><div class="line">  * of programs that execute many short-lived asynchronous tasks.</div><div class="line">  * Calls to &#123;<span class="doctag">@code</span> execute&#125; will reuse previously constructed</div><div class="line">  * threads if available. If no existing thread is available, a new</div><div class="line">  * thread will be created and added to the pool. Threads that have</div><div class="line">  * not been used for sixty seconds are terminated and removed from</div><div class="line">  * the cache. Thus, a pool that remains idle for long enough will</div><div class="line">  * not consume any resources. Note that pools with similar</div><div class="line">  * properties but different details (for example, timeout parameters)</div><div class="line">  * may be created using &#123;<span class="doctag">@link</span> ThreadPoolExecutor&#125; constructors.</div><div class="line">  *</div><div class="line">  * <span class="doctag">@return</span> the newly created thread pool</div><div class="line">  */</div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newCachedThreadPool</span><span class="params">()</span> </span>&#123;</div><div class="line">     <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">0</span>, Integer.MAX_VALUE,</div><div class="line">                                   <span class="number">60L</span>, TimeUnit.SECONDS,</div><div class="line">                                   <span class="keyword">new</span> SynchronousQueue&lt;Runnable&gt;());</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p><a href="http://www.jianshu.com/p/18b39a5f1868" target="_blank" rel="external">Java线程池的原理及几类线程池的介绍</a></p>
<p><a href="http://www.jianshu.com/p/87bff5cc8d8c" target="_blank" rel="external">深入分析java线程池的实现原理</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MarkDowm命令]]></title>
      <url>http://yoursite.com/2016/12/06/MarkDowm/</url>
      <content type="html"><![CDATA[<h1 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h1><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># 一级标题</div><div class="line">## 二级标题</div><div class="line">### 三级标题</div><div class="line">...</div></pre></td></tr></table></figure>
<h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">1. 列表</div><div class="line">2. 列表</div><div class="line">3. 列表</div><div class="line">...</div></pre></td></tr></table></figure>
<h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">* 列表</div><div class="line">* 列表</div><div class="line">* 列表</div></pre></td></tr></table></figure>
<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; 这是一个引用</div></pre></td></tr></table></figure>
<h2 id="链接与图片"><a href="#链接与图片" class="headerlink" title="链接与图片"></a>链接与图片</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[baidu](www.baidu.com)</div><div class="line"></div><div class="line">![icon](http://ohqvqufyf.bkt.clouddn.com/%E4%B8%8B%E8%BD%BD.jpeg)</div></pre></td></tr></table></figure>
<h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">*这是斜体*</div><div class="line"></div><div class="line">**这是粗体**</div></pre></td></tr></table></figure>
<h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">| 表格1 | 表格2  |</div><div class="line">|--- |--- |</div><div class="line">|  哈哈 | 呵呵  |</div></pre></td></tr></table></figure>
<h2 id="code"><a href="#code" class="headerlink" title="code"></a>code</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">helloWorld</span><span class="params">()</span></span>&#123;</div><div class="line">  print(<span class="string">"%s"</span>, <span class="string">"helloWorld"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="嵌入音乐，视频"><a href="#嵌入音乐，视频" class="headerlink" title="嵌入音乐，视频"></a>嵌入音乐，视频</h1><ul>
<li>MarkDowm 支持原始的html语法，可以使用html标签插入音乐和视频。</li>
</ul>
<h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><h3 id="HTML代码"><a href="#HTML代码" class="headerlink" title="HTML代码"></a>HTML代码</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://ohqvqufyf.bkt.clouddn.com/girl.png"</span> <span class="attr">alt</span>=<span class="string">"girl"</span>&gt;</span></div></pre></td></tr></table></figure>
<p>效果：<br><img src="http://ohqvqufyf.bkt.clouddn.com/girl.png" alt="girl"></p>
<h2 id="音乐"><a href="#音乐" class="headerlink" title="音乐"></a>音乐</h2><h3 id="HTML5代码"><a href="#HTML5代码" class="headerlink" title="HTML5代码"></a>HTML5代码</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">controls</span> <span class="attr">loop</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"http://ohqvqufyf.bkt.clouddn.com/%E9%99%88%E4%B8%80%E5%8F%91%E5%84%BF%20-%20%E7%AB%A5%E8%AF%9D%E9%95%87.mp3"</span> <span class="attr">type</span>=<span class="string">"audio/mpeg"</span>/&gt;</span></div><div class="line">  Your browser does not support HTML5 audio.</div><div class="line"><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></div></pre></td></tr></table></figure>
<p>效果:</p>
<audio controls loop><br>  <source src="http://ohqvqufyf.bkt.clouddn.com/%E9%99%88%E4%B8%80%E5%8F%91%E5%84%BF%20-%20%E7%AB%A5%E8%AF%9D%E9%95%87.mp3" type="audio/mpeg"><br>    Your browser does not support HTML5 audio.<br></audio>

<h2 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h2><h3 id="HTML5代码-1"><a href="#HTML5代码-1" class="headerlink" title="HTML5代码"></a>HTML5代码</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">width</span>=<span class="string">"320"</span> <span class="attr">controls</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"http://ohqvqufyf.bkt.clouddn.com/fyq.mp4"</span> <span class="attr">type</span>=<span class="string">"video/mp4"</span> /&gt;</span></div><div class="line">    Your browser does not support HTML5 video.</div><div class="line">  <span class="tag">&lt;/<span class="name">video</span>&gt;</span></div></pre></td></tr></table></figure>
<p>效果：</p>
<video width="320" controls><br>    <source src="http://ohqvqufyf.bkt.clouddn.com/fyq.mp4" type="video/mp4"><br>    Your browser does not support HTML5 video.<br></video>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[二叉树转换成双向链表(day6)]]></title>
      <url>http://yoursite.com/2016/11/20/everydayc/day6/</url>
      <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><ul>
<li>题目：输入一棵二元查找树，将该二元查找树转换成一个排序的双向链表。<br>要求不能创建任何新的结点，只调整指针的指向。比如将二元查找树</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">将</div><div class="line">     10</div><div class="line">     / \</div><div class="line">    6   14</div><div class="line">  / \  /  \</div><div class="line"> 4  8 12  16</div><div class="line"></div><div class="line"> 转换成双向链表4=6=8=10=12=14=16</div></pre></td></tr></table></figure>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> Node &#123;</div><div class="line">    <span class="keyword">int</span> value;</div><div class="line">    Node* left;</div><div class="line">    Node* right;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">createList</span><span class="params">(Node* head, Node* &amp;left, Node* &amp;right)</span></span>&#123;</div><div class="line">    left = head;</div><div class="line">    right = head;</div><div class="line">    <span class="keyword">if</span>(!head)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        Node *l1, *r1, *l2, *r2;</div><div class="line">        l1 = <span class="literal">NULL</span>;</div><div class="line">        r1 = <span class="literal">NULL</span>;</div><div class="line">        l2 = <span class="literal">NULL</span>;</div><div class="line">        r2 = <span class="literal">NULL</span>;</div><div class="line">        <span class="keyword">if</span>(createList(head-&gt;left, l1, r1))&#123;</div><div class="line">            head-&gt;left = r1;</div><div class="line">            r1-&gt;right = head;</div><div class="line">            left = l1;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span>(createList(head-&gt;right, l2, r2))&#123;</div><div class="line">            head-&gt;right=l2;</div><div class="line">            l2-&gt;left=head;</div><div class="line">            right = r2;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    Node n4=&#123;<span class="number">4</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>&#125;;</div><div class="line">    Node n5=&#123;<span class="number">8</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>&#125;;</div><div class="line">    Node n6=&#123;<span class="number">12</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>&#125;;</div><div class="line">    Node n7=&#123;<span class="number">16</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>&#125;;</div><div class="line">    Node n2=&#123;<span class="number">6</span>,&amp;n4,&amp;n5&#125;;</div><div class="line">    Node n3=&#123;<span class="number">14</span>,&amp;n6,&amp;n7&#125;;</div><div class="line">    Node n1=&#123;<span class="number">10</span>,&amp;n2,&amp;n3&#125;;</div><div class="line"></div><div class="line">    Node*Left=<span class="literal">NULL</span>;</div><div class="line">    Node*Right=<span class="literal">NULL</span>;</div><div class="line"></div><div class="line">    createList(&amp;n1,Left,Right);</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(Left)&#123;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;Left-&gt;value&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">        Left=Left-&gt;right;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="https://github.com/SanfenR/EveryDayC" target="_blank" rel="external">源码github</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android Annotation使用]]></title>
      <url>http://yoursite.com/2016/11/10/android/java-annotation/</url>
      <content type="html"><![CDATA[<blockquote>
<p>要深入学习注解，我们就必须能定义自己的注解，并使用注解，在定义自己的注解之前，我们就必须要了解Java为我们提供的元注解和相关定义注解的语法。</p>
</blockquote>
<h1 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h1><blockquote>
<p>元注解的作用就是负责注解其他注解。Java5.0定义了4个标准的meta-annotation类型，它们被用来提供对其它 annotation类型作说明。Java5.0定义的元注解：</p>
</blockquote>
<ol>
<li>@Target</li>
<li>@Retention</li>
<li>@Documented</li>
<li>@Inherited</li>
</ol>
<p><strong>这些类型和它们所支持的类在java.lang.annotation包中可以找到。下面我们看一下每个元注解的作用和相应分参数的使用说明。</strong></p>
<h2 id="Target"><a href="#Target" class="headerlink" title="Target"></a>Target</h2><blockquote>
<p>@Target说明了Annotation所修饰的对象范围：Annotation可被用于 packages、types（类、接口、枚举、Annotation类型）、类型成员（方法、构造方法、成员变量、枚举值）、方法参数和本地变量（如循环变量、catch参数）。在Annotation类型的声明中使用了target可更加明晰其修饰的目标。</p>
</blockquote>
<p> <strong>作用：用于描述注解的使用范围（即：被描述的注解可以用在什么地方）</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** Class, interface (including annotation type), or enum declaration */</span></div><div class="line">TYPE,</div><div class="line"><span class="comment">/** Field declaration (includes enum constants) */</span></div><div class="line">FIELD,</div><div class="line"><span class="comment">/** Method declaration */</span></div><div class="line">METHOD,</div><div class="line"><span class="comment">/** Formal parameter declaration */</span></div><div class="line">PARAMETER,</div><div class="line"><span class="comment">/** Constructor declaration */</span></div><div class="line">CONSTRUCTOR,</div><div class="line"><span class="comment">/** Local variable declaration */</span></div><div class="line">LOCAL_VARIABLE,</div><div class="line"><span class="comment">/** Annotation type declaration */</span></div><div class="line">ANNOTATION_TYPE,</div><div class="line"><span class="comment">/** Package declaration */</span></div><div class="line">PACKAGE,</div><div class="line"><span class="comment">/**</span></div><div class="line"> * Type parameter declaration</div><div class="line"> *</div><div class="line"> * <span class="doctag">@since</span> 1.8</div><div class="line"> */</div><div class="line">TYPE_PARAMETER,</div><div class="line"><span class="comment">/**</span></div><div class="line"> * Use of a type</div><div class="line"> *</div><div class="line"> * <span class="doctag">@since</span> 1.8</div><div class="line"> */</div><div class="line">TYPE_USE</div></pre></td></tr></table></figure>
<p><strong>取值(ElementType)有：</strong></p>
<ol>
<li>CONSTRUCTOR:用于描述构造器</li>
<li>FIELD:用于描述域</li>
<li>LOCAL_VARIABLE:用于描述局部变量</li>
<li>METHOD:用于描述方法</li>
<li>PACKAGE:用于描述包</li>
<li>PARAMETER:用于描述参数</li>
<li>TYPE:用于描述类、接口(包括注解类型) 或enum声明</li>
</ol>
<p><strong>使用实例:</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Target</span>(ElementType.TYPE)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Table &#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 数据表名称注解，默认值为类名称</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">tableName</span><span class="params">()</span> <span class="keyword">default</span> "className"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>注解Table 可以用于注解类、接口(包括注解类型) 或enum声明,而注解NoDBColumn仅可用于注解类的成员变量。</p>
</blockquote>
<hr>
<h2 id="Retention："><a href="#Retention：" class="headerlink" title="Retention："></a>Retention：</h2><blockquote>
<p>@Retention定义了该Annotation被保留的时间长短：某些Annotation仅出现在源代码中，而被编译器丢弃；而另一些却被编译在class文件中；编译在class文件中的Annotation可能会被虚拟机忽略，而另一些在class被装载时将被读取（请注意并不影响class的执行，因为Annotation与class在使用上是被分离的）。使用这个meta-Annotation可以对 Annotation的“生命周期”限制。<br>M</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Vim-command]]></title>
      <url>http://yoursite.com/2016/11/05/vim-command/</url>
      <content type="html"><![CDATA[<h2 id="光标移动"><a href="#光标移动" class="headerlink" title="光标移动"></a>光标移动</h2><table>
<thead>
<tr>
<th>命令</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>h,j,k,l</td>
<td>左 下 右 上</td>
</tr>
<tr>
<td>Ctrl+f</td>
<td>上一页</td>
</tr>
<tr>
<td>Ctrl+b</td>
<td>下一页</td>
</tr>
<tr>
<td>w,e,W,E</td>
<td>调到单词后面，小写包括标点</td>
</tr>
<tr>
<td>O</td>
<td>开启新的一行</td>
</tr>
<tr>
<td>^</td>
<td>一行的开始</td>
</tr>
<tr>
<td>gg</td>
<td>文档的结尾</td>
</tr>
<tr>
<td>[N]G</td>
<td>文档的第N行或者最后一行</td>
</tr>
</tbody>
</table>
<h2 id="插入模式"><a href="#插入模式" class="headerlink" title="插入模式"></a>插入模式</h2><table>
<thead>
<tr>
<th>命令</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>i</td>
<td>插入到光标前面</td>
</tr>
<tr>
<td>I</td>
<td>插入到行的开始位置</td>
</tr>
<tr>
<td>a</td>
<td>插入到光标的后面</td>
</tr>
<tr>
<td>A</td>
<td>插入到行的最后位置</td>
</tr>
<tr>
<td>o,O</td>
<td>新开一行</td>
</tr>
<tr>
<td>Esc</td>
<td>关闭插入模式</td>
</tr>
</tbody>
</table>
<h2 id="编辑"><a href="#编辑" class="headerlink" title="编辑"></a>编辑</h2><table>
<thead>
<tr>
<th>命令</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>r</td>
<td>在插入模式替换光标所在的一个字符</td>
</tr>
<tr>
<td>J</td>
<td>合并下一行到上一行</td>
</tr>
<tr>
<td>s</td>
<td>删除光标所在的一个字符，光标还在当行</td>
</tr>
<tr>
<td>S</td>
<td>删除光标所在的一行, 光标还在当行，不同于dd</td>
</tr>
<tr>
<td>u</td>
<td>撤销上一步操作</td>
</tr>
<tr>
<td>ctrl+r</td>
<td>恢复上一步操作</td>
</tr>
<tr>
<td>.</td>
<td>重复最后一个命令</td>
</tr>
<tr>
<td>~</td>
<td>变换为大写</td>
</tr>
<tr>
<td>[N]&gt;&gt;</td>
<td>一行或N行往右移动一个tab</td>
</tr>
<tr>
<td>[N]&lt;&lt;</td>
<td>一行或N行往左移动一个tab</td>
</tr>
</tbody>
</table>
<h2 id="关闭"><a href="#关闭" class="headerlink" title="关闭"></a>关闭</h2><table>
<thead>
<tr>
<th>命令</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>:q</td>
<td>保存</td>
</tr>
<tr>
<td>:wq, :x</td>
<td>保存并关闭</td>
</tr>
<tr>
<td>:q</td>
<td>关闭</td>
</tr>
<tr>
<td>:q!</td>
<td>强制关闭</td>
</tr>
</tbody>
</table>
<h2 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h2><table>
<thead>
<tr>
<th>命令</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>/pattern</td>
<td>搜索(非插入模式)</td>
</tr>
<tr>
<td>?pattern</td>
<td>向后搜索</td>
</tr>
<tr>
<td>n</td>
<td>光标到达搜索结果的前一个目标</td>
</tr>
<tr>
<td>N</td>
<td>光标到达搜索结果的后一个目标</td>
</tr>
</tbody>
</table>
<h2 id="视觉模式"><a href="#视觉模式" class="headerlink" title="视觉模式"></a>视觉模式</h2><table>
<thead>
<tr>
<th>命令</th>
<th>模式</th>
</tr>
</thead>
<tbody>
<tr>
<td>v</td>
<td>选中一个或多个字符</td>
</tr>
<tr>
<td>V</td>
<td>选中一行</td>
</tr>
</tbody>
</table>
<h2 id="剪切和复制"><a href="#剪切和复制" class="headerlink" title="剪切和复制"></a>剪切和复制</h2><table>
<thead>
<tr>
<th>命令</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>dd</td>
<td>删除一行</td>
</tr>
<tr>
<td>dw</td>
<td>删除一个单词</td>
</tr>
<tr>
<td>x</td>
<td>删除后一个字符</td>
</tr>
<tr>
<td>X</td>
<td>删除前一个字符</td>
</tr>
<tr>
<td>D</td>
<td>删除一行最后一个字符</td>
</tr>
<tr>
<td>[N]yy</td>
<td>复制一行或者N行</td>
</tr>
<tr>
<td>yw</td>
<td>复制一个单词</td>
</tr>
<tr>
<td>p</td>
<td>粘贴</td>
</tr>
</tbody>
</table>
<h2 id="窗口命令"><a href="#窗口命令" class="headerlink" title="窗口命令"></a>窗口命令</h2><table>
<thead>
<tr>
<th>命令</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>: split</td>
<td>水平分割出一个窗口</td>
</tr>
<tr>
<td>:vsplit</td>
<td>垂直分割出一个窗口</td>
</tr>
<tr>
<td>:close</td>
<td>关闭窗口</td>
</tr>
<tr>
<td>ctrl+w</td>
<td>切换窗口  h,j,k,l 左下上右</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[字符串剔除(day5)]]></title>
      <url>http://yoursite.com/2016/10/24/everydayc/day5/</url>
      <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><ul>
<li>输入两个字符串，从第一字符串中删除第二个字符串中所有的字符。例如，输入”They are students.”和”aeiou”，则删除之后的第一个字符串变成”Thy r stdnts.”。</li>
</ul>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>最简单的。设source长n，key长m(n&gt;&gt;m)，则使用简单的遍历查找需要n*m次(n个字符，查找m次)，且每次删除对应元素需要O(1)时间(元素移动)。时间复杂度为O(n.^2);</p>
<p>以下思路。查找时间复杂度为O(n),删除时间复杂度为O(n)。即O(n)的时间内完成。</p>
<ol>
<li>建立长度为256(char元素总数)的hash数组(类似基排序)，遍历key。即需要在source中删除的字符在hashtable上不为0。复杂度O(m)。</li>
<li>设定指针 temp和needDelete，初始化指向source.</li>
<li>temp用来遍历source，任何时候指向不需要删除的字符。needDelete指向当前需要删除的第一个字符。</li>
<li>使用间接删除法。即将temp的值赋给source。</li>
<li>任何一轮循环。needDelete–temp-1的字符都可以被删除(即替代)。temp之前不需要删除的字符，都已经挪到needDelete之前。</li>
<li>以temp为空位结束条件。最后给needDelete赋空。</li>
</ol>
<p>整体思路,从第一个删除的位置开始，依次把后面不需要删除的字符向前赋值。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">char</span> *<span class="title">deleteStr</span><span class="params">(<span class="keyword">char</span> *source, <span class="keyword">const</span> <span class="keyword">char</span> *key)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!source || !key)</div><div class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *temp = key;</div><div class="line">    <span class="comment">//static int hashTable[256];</span></div><div class="line">    <span class="keyword">int</span> *hashTable = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">256</span>];</div><div class="line">    <span class="built_in">memset</span>(hashTable, <span class="number">0</span>, <span class="number">256</span> * <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</div><div class="line"></div><div class="line">    <span class="keyword">while</span> (*temp)</div><div class="line">        hashTable[*temp++]++;</div><div class="line">    temp = source;</div><div class="line">    <span class="keyword">char</span> *needDelete = source;</div><div class="line">    <span class="keyword">while</span> (*temp) &#123;</div><div class="line">        <span class="keyword">if</span> (!hashTable[*temp]) &#123;<span class="comment">//不需要删除的字符，前移赋值</span></div><div class="line">            *needDelete = *temp;</div><div class="line">            needDelete++;</div><div class="line">        &#125;</div><div class="line">        temp++;</div><div class="line">    &#125;</div><div class="line">    *needDelete = <span class="string">'\0'</span>;</div><div class="line">    <span class="keyword">delete</span>[]hashTable;</div><div class="line">    <span class="keyword">return</span> source;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="https://github.com/SanfenR/EveryDayC" target="_blank" rel="external">源码github</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android面试题整理]]></title>
      <url>http://yoursite.com/2016/10/22/android/Android%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/</url>
      <content type="html"><![CDATA[<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><ol>
<li><p>GC是什么?为什么要有GC?</p>
<blockquote>
<p>GC是垃圾收集的意思(Garbage Collection), 内存处理是编程人员容易出现问题的地方，忘记或者错误的内存回收会导致程序或系统的不稳定甚至崩溃，Java提供的GC功能可以自动的检测对象是否超过作用域从而达到自动回收内存的目的，Java语言没有提供释放已分配内存的显示操作方法。</p>
</blockquote>
</li>
<li><p>XML包括哪些解析技术，区别是什么？</p>
<blockquote>
<p>DOM和SAX DOM将文档解析成一颗文档树，可在节点上进行遍历、增加、修改和删除。一次性读入内存，对内存消耗大。 SAX至上而下解析文档，以事件进行驱动。不会一次性读入内存，对内存消耗小，不能任意读取节点，并且不能对节点进行增加、修改和删除。</p>
</blockquote>
</li>
<li><p>switch语句能否作用在byte上，能否作用在long上，能否作用在String上?</p>
<blockquote>
<p>switch 能作用在byte, short. char,int, 在JDK1.7以后可以作用在String上。</p>
</blockquote>
</li>
<li><p>“==”和equals方法究竟有什么区别？</p>
<blockquote>
<p>==和equals都可以比较地址, ==是运算符，equals是方法，方法可以通过重写改变其行为，如String的equals就是比较字符串内容。</p>
</blockquote>
</li>
<li><p>构造方法能否被重写和重载？</p>
<blockquote>
<p>不能被重写，但能被重载。</p>
</blockquote>
</li>
<li><p>面向对象的特征有哪些？</p>
<blockquote>
<p>封装，继承，多态，抽象</p>
</blockquote>
</li>
<li><p>抽象类和接口的区别？</p>
<blockquote>
<ol>
<li>抽象类是abstract class 修饰符，接口是interface修饰符。</li>
<li>抽象类可以有任意属性， 接口只能有静态常量修饰的属性。</li>
<li>抽象类可以有普通方法和抽象方法，接口只能有抽象方法。</li>
<li>抽象类和接口都不能实例化，但是抽象类有构造方法，接口没有。5. 抽象类只能单继承，接口可以多继承。</li>
</ol>
</blockquote>
</li>
<li><p>内部类可以引用它的包含类的成员吗？有没有什么限制？</p>
<blockquote>
<p>可以引用， 如果需要制定当前类时要用到外部类.this。如果引用局部变量，需要将局部变量指定为final。</p>
</blockquote>
</li>
<li><p>String s = new String(“xyz”);创建了几个String Object? 二者之间有什么区别？</p>
<blockquote>
<p>创建了2个对象， “xyz” 创建在常量池中， new String() 创建在堆中</p>
</blockquote>
</li>
<li><p>try {}里有一个return语句，那么紧跟在这个try后的finally{}里的code会不会被执行，什么时候被执行，在return前还是后?</p>
<blockquote>
<p>会执行，在return之前</p>
</blockquote>
</li>
<li><p>Integer与int的区别</p>
<blockquote>
<p>Integer为包装类， int 是基本数据类型。包装类拥有方法和属性，基本数据类型不具备。包装类可以通过intValue来转换基本数据类型,也可以通过new Integer()将基本数据类型转换为包装类。在JDK1.5后，包装类和基本数据类型可以实现自动转换。</p>
</blockquote>
</li>
<li><p>sleep()和wait()有什么区别?</p>
<blockquote>
<p>sleep是Thread类的方法，wait是Object类的方法。<br>sleep是自动唤醒，wait需要其他线程来唤醒。<br>sleep不会释放同步锁，wait会释放同步锁。<br>sleep可以用在任意方法中，wait只能在同步方法或同步块中。<br>sleep()不会释放对象锁到时自动恢复,wait()会释放对象锁进入等待此对象的锁定池发出notify()方法后才进入锁定池。</p>
</blockquote>
</li>
<li><p>同步和异步有何异同，在什么情况下分别使用他们？</p>
<blockquote>
<p>同步指同一时间只能一个线程执行该方法，其他线程需要等待。异步指多个线程可以同时执行某个方法，并共享同一资源。<br>同步可以让访问的资源具有安全性，同一时间只能一个线程对其访问。但效率不高。异步对访问的资源会造成不稳定性，比如多个线程同时访问一个资源，一个在修改，一个在删除，一个在读取，这样可能会造成资源的混乱。但是效率提高。</p>
</blockquote>
</li>
<li><p>启动一个线程是用run()还是start()?</p>
<blockquote>
<p>statr()启动线程, run()方法是线程执行的主方法。</p>
</blockquote>
</li>
<li><p>java中有几种类型的流？JDK为每种类型的流提供了一些抽象类以供继承，请说出他们分别是哪些类？</p>
<blockquote>
<p>java中有三种流，分别是字节流(InputStream, OutputStream), 字符流(Reader,Writer), 对象流(ObjectInputStream, ObjectOutputStream)</p>
</blockquote>
</li>
<li><p>字节流和字符流的区别？</p>
<blockquote>
<p>字节流用于读取或写出二进制数据，比如图片，影响等数据。<br>字符流用于读取或写出字符数据，比如传输字符串。<br>所有的数据都可以通过字节流来处理，如果是字符数据，用字节流还需要进行转换后传输，如果使用字符流可以方便数据的转换。</p>
</blockquote>
</li>
<li><p>error和exception有什么区别？</p>
<blockquote>
<p>error 是系统错误，代码不能处理的错误，比如内存溢出，堆栈溢出等。<br>exception是程序异常，可以通过try-cache进行处理，如空指针，数组越界等。</p>
</blockquote>
</li>
<li><p>谈谈final，fianlly, finalize的区别？</p>
<blockquote>
<p>final 是修饰符，可以修饰类(不能被继承)，属性(常量)和方法(不能被重写)<br>finally是异常处理块的代码块，表示无论如何都会执行的代码块。<br>finalize是Object类方法,该方法在对象被垃圾回收之前执行的方法。</p>
</blockquote>
</li>
<li><p>当一个线程进入一个对象的synchronized方法后，其他线程是否可以进入此方法的其他方法？</p>
<blockquote>
<p>如果其他方法没有设置synchronized是可以进入的。</p>
</blockquote>
</li>
<li><p>当一个对象被当作参数传递到一个方法后，此方法可改变这个对象的属性，并可返回变化后的结果，那么这里到底是值传递还是引用传递?</p>
<blockquote>
<p>java中只有值传递，如果传递的对象，实际也是传递该对象的地址。</p>
</blockquote>
</li>
<li><p>作用域public,private,protected,以及不写时的区别</p>
<blockquote>
<p>public公共修饰符，所有的类都可以访问<br>protected为受保护的修饰符，表示同类、同包以及不同包但是父子关系的是可以访问。<br>不写表示默认修饰符,或者称为package修饰符，该修饰符表示只有同类huo或同包下的类可以访问，出了这个包就不能访问。<br>private为私有修饰符，表示只有在同类中可以访问，chu’l出了这个类就不能访问。</p>
</blockquote>
</li>
<li><p>用最有效率的方法算出2*8</p>
<blockquote>
<p>将2左移3位, 2 &lt;&lt; 3</p>
</blockquote>
</li>
<li><p>heap和stack有什么区别。</p>
<blockquote>
<p>heap表示堆， stack表示栈， 堆中存放对象，栈中存放引用变量<br>堆是无序的空间， 栈是先进后出的结构。</p>
</blockquote>
</li>
<li><p>运行时异常与一般异常有何异</p>
<blockquote>
<p>运行时异常指继承于RuntimeException的异常，这些异常在编译时可以不进行处理，当运行时如果出现问题才会抛出。如NullPointException, ArrayIndexOutBoundsExceptions<br>一般异常也称为编译时异常，这些异常是继承Exception但又不属于RuntiomException的子类，如果程序出现这些异常，在编译时必须进行捕获或抛出，否则编译无法通过，如IOException, FileNotException</p>
</blockquote>
</li>
<li><p>垃圾回收的优点和原理。并考虑2中回收机制。</p>
<blockquote>
<p>Java语言中一个显著的特点就是引入了垃圾回收机制，使c++程序员最头疼的内存管理的问题迎刃而解，它使得Java程序员在编写程序的时候不再需要考虑内存 管理。由于有个垃圾回收机制，Java中的对象不再有”作用域”的概念，只有对象的引用才有”作用域”。垃圾回收可以有效的防止内存泄露，有效的使用可以使用 的内存。垃圾回收器通常是作为一个单独的低级别的线程运行，不可预知的情况下对内存堆中已经死亡的或者长时间没有使用的对象进行清楚和回收，程序员不能 实时的调用垃圾回收器对某个对象或所有对象进行垃圾回收。回收机制有分代复制垃圾回收和标记垃圾回收，增量垃圾回收。</p>
</blockquote>
</li>
<li><p>描述一下JVM加载class原理机制？</p>
<blockquote>
<p>JVM中类的装载是由ClassLoader和他的子类来实现的，Java ClassLoader是一个重要的Java运行时系统组件。他负责在运行时查找和装入类文件的类。</p>
</blockquote>
</li>
<li><p>是否可以从一个static方法内部发出非static方法的调用？</p>
<blockquote>
<p>不能，除非先创建非static方法所在类的对象。</p>
</blockquote>
</li>
<li><p>什么是java序列化，如何实现java序列化？</p>
<blockquote>
<p>序列化就是一种用来处理对象流的机制，所谓对象流也就是将对象的内容进行流化。可以对流化后的对象进行读写操作，也可将流化后的对象传输于网络之间。序 列化是为了解决在对对象流进行读写操作时所引发的问题。<br>序列化的实现：将需要被序列化的类实现Serializable接口，该接口没有需要实现的方法，implements Serializable只是为了标注该对象是可被序列化 的，然后使用一个输出流(如：FileOutputStream)来构造一个ObjectOutputStream(对象流)对象，接着，使用ObjectOutputStream对象的 writeObject(Object obj)方法就可以将参数为obj的对象写出(即保存其状态)，要恢复的话则用输入流。</p>
</blockquote>
</li>
<li><p>Anonymous Inner Class(匿名内部类)是否可以extends(继承)其它类，是否可以implements(实现)interface(接口)？</p>
<blockquote>
<p>匿名内部类可以继承类或实现接口，但不是显示的使用extends或implements来继承或实现。</p>
</blockquote>
</li>
<li><p>ArrayList和Vector的区别,HashMap和Hashtable的区别？</p>
<blockquote>
<p>ArrayList是JDK1.2的集合类型线程不安全，Vector是1.0的集合并且线程安全，二者用法相似。<br>HashMap线程不安全且能放空键或空值，HashTable线程安全且不能放空键或空值。</p>
</blockquote>
</li>
<li><p>String 和StringBuffer有什么差别？在什么情况下使用它们？</p>
<blockquote>
<p>String 是字符串的基本类，该字符串是不可变的。StringBuffer是利用堆来存储字符串，并且可以对字符串的内容进行改变。</p>
</blockquote>
</li>
<li><p>new一个类对象和使用类名创建一个对象有什么区别？二者使用时应该注意什么？</p>
<blockquote>
<p>new对象是最常见的创建对象的方式。利用模板通过反射来创建对象。虽然new对象时在底层也会通过类模板来创建对象，但是new对象的效率要比直接通过类模板创建对象的方式要高。但是使用类模板的方式可以让程序的灵活性提高。</p>
</blockquote>
</li>
<li><p>LinkedList和ArrayList的区别？</p>
<blockquote>
<p>LinkedList是链表结构的集合，ArrayList是数组结构的集合。<br>LinkedList在中间或前面增加或删除数据时效率要比ArrayList高。<br>LinkedList在最后添加或删除数据时比ArrayList低<br>遍历数据时ArrayList效率高于LinkedList</p>
</blockquote>
</li>
<li><p>介绍JAVA开发中常用的Collection FrameWork（集合框架）?</p>
<blockquote>
<p>Java中集合框架分为Collection和Map接口，Collection接口下的集合每个元素都是由一个值组成，Map接口下的集合类每个元素都是由键值对组成。<br>Collection接口下面有List和Set接口，List接口下常见的类有ArrayList, LinkerList,Vector。 他们中的元素可以重复，并且是有序的。Set接口常见的类HashSet, TreeSet。他们中的元素不能重复，并且是无序的。</p>
</blockquote>
</li>
<li><p>在异常当中 throw和throws 有什么区别和联系？</p>
<blockquote>
<p>throw是在代码中抛出一个异常，后面跟的是异常对象，虚拟机运行到这里时会立即引发一个异常。<br>throws是写在方法声明上的，表示声明该方法可能会抛出异常，后面跟的是异常类型。调用该方法的时候可以选择处理它或继续往外抛。</p>
</blockquote>
</li>
<li><p>重载和重写的区别</p>
<blockquote>
<p>重载是指一个类中，两个或两个以上的方法具有相同的方法名和不同的参数列表，则表示这些方法为重载方法。<br>重写是指父类和子类中，子类方法和父类方法具有相同的方法名，相同参数，相同返回类型，子类的访问修饰符范围不小于父类的访问修饰符范围，异常的类型个个数不大于或多于父类的异常类型和个数，则表示该方法为重写方法。换句话说重载方法是区分同一个类中相同方法名的方法，重写方法是找到父类相同方法名的方法并重写改变方法的行为。</p>
</blockquote>
</li>
<li><p>Java中try catch finally的执行顺序</p>
<blockquote>
<p>try -&gt; 发生异常执行catch -&gt; 最后一定会执行finall</p>
</blockquote>
</li>
<li><p>内存泄露的原因：</p>
<blockquote>
<ol>
<li>资源对象没关闭。 如Cursor, File等资源。他们会在finalize中关闭,但这样效率太低。容易造成内存泄露。SQLiteCursor,当数据量大的时候容易泄露。</li>
<li>使用Adapetr时， 没有使用系统缓存的converView.</li>
<li>即时调用recycle()释放不再使用的Bitmap。 适当降低Bitmap的采样率，如：<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">BitmapFactory.Option option = <span class="keyword">new</span> BitmapFactory.Options();</div><div class="line">options.inSampleSize = <span class="number">2</span>;</div><div class="line"><span class="comment">//图片宽高都为原来的二分之一，即图片为原来的四分之一。</span></div><div class="line">Bimap bitmap = BitmapFactory.decodeStream(cr.openInputStream(uri), <span class="keyword">null</span>, options);</div><div class="line">preview.setImageBitmap(bitmap);</div></pre></td></tr></table></figure>
</li>
</ol>
</blockquote>
<ol>
<li>使用application的context来代替activity相关的context。</li>
<li>注册没取消造成内存泄露。 如：广播 集合中的对象没清理造成的内存泄露我们通常把一些对象的引用加入到了集合中，当我们不需要gai该对象时，并没有把它的应用从集合中清理掉，这样这个集合就会越来越大。如果这个集合static的话，那情况就更加严重。</li>
<li>Handle应当声明为静态对象，并在内部类中保存一个对外部类的弱引用。如:<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</div><div class="line">    WeakRefrence&lt;Activity&gt; mActivityRefrence;</div><div class="line">    MyHandler(Activity activity) &#123;</div><div class="line">        mActivityRefrence = <span class="keyword">new</span> WeakRefrence&lt;Activity&gt;(activity);</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handlerMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> Activity activity = mActivityRefrence.get();</div><div class="line">        <span class="keyword">if</span>(activity != <span class="keyword">null</span>)&#123;</div><div class="line">            mImageView.setImageBitmap((Bitmap)(msg.getObj1()));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>Iterator和Enumeration的不同</p>
<blockquote>
<ul>
<li>函数接口不同<br>Enumeration只有2个函数接口。通过Enumeration,我盟只能读取集合的数据，而不能对数据进行修改。Iterator只有3个函数接口。Iterator除了能读取集合的数据之外，也能数据进行删除操作。</li>
<li>Iterator支持fail-fast机制，而Enumeration不支持。 Enumeration 是JDK 1.0添加的接口。使用到它的函数包括Vector、Hashtable等类，这些类 都是JDK 1.0中加入的，Enumeration存在的目的就是为它们提供遍历接口。Enumeration本身并没有支持同步，而在Vector、Hashtable实现 Enumeration时，添加了同步。而Iterator 是JDK 1.2才添加的接口，它也是为了HashMap、ArrayList等集合提供遍历接口。<br>Iterator是支持fail-fast 机制的：当多个线程对同一个集合的内容进行操作时，就可能会产生fail-fast事件。<br>ail-fast 机制是java集合(Collection)中的一种错误机制。当多个线程对同一个集合的内容进行操作时，就可能会产生fail-fast事件。例如：当某一个线 程A通过iterator去遍历某集合的过程中，若该集合的内容被其他线程所改变了；那么线程A访问集合时，就会抛出ConcurrentModificationException异 常，产生fail-fast事件。</li>
</ul>
</blockquote>
</li>
<li><p>接口的注意点</p>
<blockquote>
<ol>
<li>接口的字段全部默认为public static 类型。</li>
<li>接口中的方法全部默认为public类型。</li>
<li>接口中可以声明内部类，而默认为public static,正因为是static,只是命名空间属于接口，代码逻辑不属于接口。所有不违反接口定义。</li>
<li>接口本省可以声明为pullic 或者缺省。</li>
<li>抽象类继承某接口。如果在抽象类中实习了父类(接口)中的方法，在其子类可以不用实现，否则在子类必须实现。</li>
</ol>
</blockquote>
</li>
<li><p>final方法</p>
<blockquote>
<p>将方法声明为final那有两个原因，第一就是说明你已经知道这个方法提供的功能已经满足你要求，不需要进行扩展，并且也不允许任何从此类继承的类来覆写这个方法，但是继承仍然可以继承这个方法，也就是说可以直接使用。第二就是允许编译器将所有对此方法的调用转化为inline调用的机制，它会使你在调用final方法时，直接将方法主体插入到调用处，而不是进行例行的方法调用，例如保存断点，压栈等，这样可能会使你的程序效率有所提高，然而当你的方法主体非常庞大时，或你在多处调用此方法，那么你的调用主体代码便会迅速膨胀，可能反而会影响效率，所以你要慎用final进行方法定义。</p>
</blockquote>
</li>
</ol>
<h2 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h2><ol>
<li><p>Activity, Service, BroadcastReceiver的作用</p>
<blockquote>
<ul>
<li>Activity: Activity 是Android程序与用户交互接窗口，是Android构造块中最基本的一种，他需要为保持各界面的状态，做很多持久化的事情，妥善管理生命周期以及一些跳转逻辑。</li>
<li>Service: 后台服务于Activity, 封装有一个完整的功能逻辑实现，接受上层命令，完成相关的指令，定义好需要接受Intent提供同步和异步的接口</li>
<li>BroadcastReceiver: 接受一种或者多种Intent做触发事件，接受相关消息，做一些简单处理，转换成一条Notification,统一了Android的事件广播模型。</li>
</ul>
</blockquote>
</li>
<li><p>Activity 生命周期</p>
<blockquote>
<p>onCreate(), onStart(), onResume(), onPause(), onReStart(), onStop(), onDestory()</p>
</blockquote>
</li>
<li><p>显示Intent和隐式Intent的区别是什么？</p>
<blockquote>
<p>Intent定义: Intent是一种在不同组件之间传递的请求消息，是程序发出的请求和意图，作为一个完整的消息传递机制，Intent不仅需要发送端，还需要接收端。<br>显示Intent定义: 对明确指出了目标组件名称Intent,我们称之为显示Intent。<br>隐式Intent定义: 对于没有明确指出目标组件名称Intent,则称之为隐式Intent.<br>说明: Android系统使用IntentFilter 来寻找与隐式Intent相关的对象。</p>
</blockquote>
</li>
<li><p>Android 线程同步的方法</p>
<blockquote>
<p>线程同步的方法可以采用同步方法和同步块。</p>
</blockquote>
</li>
<li><p>怎么讲一个Activity封装成对话框的样子？怎样将Activity封装成按Menu菜单的样子。</p>
<blockquote>
<p>简单你只需要设置一下Activity的主题在Android Manifest.xml中定义Activity的地方一句话：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//设置为DialogActivity</div><div class="line">android:theme="@android:style/Theme.Dialog"</div><div class="line">//设置背景为半透明</div><div class="line">android:theme="@android:style/Theme.Translucent"</div></pre></td></tr></table></figure>
</blockquote>
<p>重写OnCreateOptionMenu方法来处理按下menu后的行为，然后再该方法中弹出对话框形式的Activity.<br>也可以利用时间监听来监听menu按键，并在该按钮按下后弹出对话框形式的Activity.</p>
</li>
<li><p>介绍Android体系结构</p>
<blockquote>
<p>Android分为4层<br>应用层： Android的应用程序与的用户交互界面。<br>应用框架层： UI组件， 管理器， 工具类。<br>函数库层：系统C库，媒体库，Webkit, SQLite等。<br>Linux核心库： linux系统运行的组件。</p>
</blockquote>
</li>
<li><p>描述下横竖屏切换时候 activity 的生命周期</p>
<blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//不设置, 切屏会重新调用生命周期，横屏时会执行一次，切竖屏会执行两次。</div><div class="line">android:configChanges</div><div class="line">//切屏还是会重新调用各个生命周期，切横，竖屏时只会执行一次。</div><div class="line">android:configChanges="orientation"</div><div class="line">//切屏不会重新调用各个生命周期，只会执行onConfiguraationChanged方法</div><div class="line">android:configChanges="orientation|keyboardHidden"</div></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>android 中的动画有哪几种，它们的特点和区别是什么 ?</p>
<blockquote>
<p>帧动画(Frame)和补间动画(Tween),<br>Tween动画，这种实现方式可以是试图组件移动，放大，缩小以及产生透明度的变化；<br>另一种Frame动画，传统的动画方法，通过顺序的播放排列好的图片实现，类似电影。</p>
</blockquote>
</li>
<li><p>一条短信多少个byte?</p>
<blockquote>
<p>140byte, 70个汉字</p>
</blockquote>
</li>
<li><p>handle机制</p>
<blockquote>
<p>Handle的作用，发送消息到消息队列，接受Looper传递的消息。<br>主线程启动时会调用Looper.prepare()方法，初始化一个Looper,放入TreadLocal中，接着调用Looper.loop()不断遍历Message Queue. Handler的创建依赖与当期线程中的Looper,如果当前线程没有Looper则必须调用Looper.perpare()。<br>Handler的创建依赖与当前线程中的Looper，如果当前线程没有Looper则必须调用Looper.prepare()。Handler , sendMessage到MessageQueue，Looper不断<br>从MessageQueue中取出消息，回调handleMessage方法。</p>
</blockquote>
</li>
<li><p>如何将SQLite数据库(dictionary.db文件)与apk文件一起发布 ?</p>
<blockquote>
<p>可以将dictionary.db文件复制到Eclipse Android工程中的res\raw目录中。所有在res\raw目录中的文件不会被压缩，这样可以直接提取该目录中的文件。使用openDatabase方法来打开数据库文件，如果该文件不存在，系统会自动创建/sdcard/dictionary目录，并将res\raw目录中的 dictionary.db文件复制到/sdcard/dictionary目录中</p>
</blockquote>
</li>
<li><p>说说 android 中 mvc 的具体体现</p>
<blockquote>
<p>mvc 是model,view,controller的缩写</p>
<ul>
<li>模型（model）对象：是应用程序的主体部分，所有的业务逻辑都应该写在该层。</li>
<li>视图（view）对象：是应用程序中负责生成用户界面的部分。也是在整个mvc架构中用户唯一可以看到的一层，接收用户的输入，显示处理结果。</li>
<li>控制器（control）对象：是根据用户的输入，控制用户界面数据显示及更新model对象状态的部分，控制器更重要的一种导航功能，响应用户出发的相关事件，交给m层处理。<br>Android鼓励弱耦合和组件的重用，在android中mvc的具体体现如下：</li>
</ul>
<ol>
<li>view: 一般采用xml文件进行界面的描述。</li>
<li>controller: Android的控制层通常落在Activity中。</li>
<li>model: 数据库操作，网络请求都应该在model中处理。</li>
</ol>
</blockquote>
</li>
<li><p>请介绍下 Android 中常用的五种布局</p>
<blockquote>
<ol>
<li>FrameLayout</li>
<li>RelativeLayout</li>
<li>LinearLayout</li>
<li>TableLayout</li>
<li>AbsoluteLayout</li>
</ol>
</blockquote>
</li>
<li><p>如何启用 Service ，如何停用 Service</p>
<blockquote>
<ol>
<li>StartService()  启动服务， StopService();</li>
<li>bindService, unBindService</li>
</ol>
</blockquote>
</li>
<li><p>如何优化ListView</p>
<blockquote>
<ol>
<li>contentView的复用</li>
<li>如果item过多时，考虑分页加载</li>
</ol>
</blockquote>
</li>
<li><p>描述4种 activity 的启动模式</p>
<blockquote>
<ol>
<li>standard: 系统的默认模式， 一次跳转即会生成一个新的实例<br>2，singTop: 如果要启动的Activity已经在回退栈的顶部时， 不会生成新的实例。</li>
<li>singTask: 如果要启动的Activity在回退栈中的时候，此Activity之上的所有Activity释放，直到栈顶是要启动的Activity.</li>
<li>singInstance: 启动Activity时同时创建一个新的栈并在新栈中创建这个Activity实例。</li>
</ol>
</blockquote>
</li>
<li><p>什么是Intent，如何使用？</p>
<blockquote>
<p>Android设计理念是鼓励减少组件之间的耦合，因此Android提供了Intent(意图)， Intent提供一种通用的消息系统，他允许在你的应用程序与其他的应用程序间传递Intent来执行动作和产生事件。使用Intent可以激活Android应用的三个核心组件： 活动，服务和广播接受器。通过startActivity() or startActivityForResult()启动一个Activity；<br>startService()启动一个服务，或者通过bindService()<br>广播(sendBroadcast(), sendOrderedBroadcast(), sendStickyBroadcast())发给broadcastReceivers</p>
</blockquote>
</li>
<li><p>Android用的数据库是什么样的？它和Sql有什么区别？为什么要用ContentProvide? 它和SQL的实现有什么差别？</p>
<blockquote>
<p>android用的是SQLite数据库。它和其他网络数据库类似，也是通过SQL对数据进行管理。SQLite的操作非常简单，包括数据类型在建表时也可以不指定。<br>使用ContentProvider 可以将数据共享给其他应用，让除本应用之外的应用也可以访问本应用的数据。它的底层是用SQLite 数据库实现的，所以其对数据做的各种操作都是以Sql实现，只是在上层提供的是Uri。</p>
</blockquote>
</li>
<li><p>通过Intent传递一些二进制数据的方法有哪些？</p>
<blockquote>
<ol>
<li>Serializable序列化</li>
<li>Parcelable接口，Android的部分类比如Bitmap类就已经实现，同时Parcelable在Android AIDL中交换数据也很常见。</li>
</ol>
</blockquote>
</li>
<li><p>对一些资源以及状态的操作保存，最好是保存在生命周期的哪个函数中进行？</p>
<blockquote>
<p>onResume()中恢复数据， onPause()保存数据。</p>
</blockquote>
</li>
<li><p>如何一次性退出所有打开的Activity</p>
<blockquote>
<p>编写一个Activity作为入口，当需要关闭程序时，可以利用Activity的singTask模式跳转该Activity,它上面所有的Activity都会被销毁，<br>或者在Intent设置Flag</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//A B C D   ----&gt;  D start B -----&gt; A B</span></div><div class="line">Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, B.class);</div><div class="line">intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);</div><div class="line">intent.addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP);</div><div class="line">startActivity(intent);</div><div class="line"></div><div class="line"><span class="comment">//A B C D  ----&gt; D start B ------&gt; A C D B</span></div><div class="line">Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, MainActivity.class);</div><div class="line">intent.addFlags(Intent.FLAG_ACTIVITY_REORDER_TO_FRONT);</div><div class="line">startActivity(intent);</div></pre></td></tr></table></figure>
</li>
<li><p>Service生命周期？</p>
<blockquote>
<p>启动Service的方式有两种，各自的生命周期也有不同。</p>
<ul>
<li>通过statrService启动Service: onCreate, onStartCommand, onDestory</li>
<li>通过bindServcie启动Service: onCreate, onBind, onUnBind, onDestory</li>
</ul>
</blockquote>
</li>
<li><p>什么是AIDL？AIDL是如何工作的？</p>
<blockquote>
<p>AIDL(Android Interface definition language), 编译器可以通过aidl文件生成一段代码，通过预先定义的接口达到两个进程内部通信进程的目的，如果需要在一个Activity中，访问另一个Service中的某个对象，需要先将对象转化成AIDL可识别的参数(可能是多个参数)，然后使用AIDL来传递这些参数，在消息的接受端，使用这些参数组装成浙江需要的对象， AIDL是基于接口的，但它是轻量级的。它使用代理类在客户端和实现层间传递值。</p>
</blockquote>
</li>
<li><p>Android如何把文件存放在SDCard上？</p>
<blockquote>
<p>在AndroidManifest.xml中添加权限</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">!-</span> 在<span class="attr">SDCard</span>中创建与删除文件权限 <span class="attr">-</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.MOUNT_UNMOUNT_FILESYSTEMS"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">!-</span> 往<span class="attr">SDCard</span>中写入的权限 <span class="attr">-</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">Android:name</span>=<span class="string">"android.permission.WRITE_EXTERNAL_STORAGE"</span>/&gt;</span></div></pre></td></tr></table></figure>
</blockquote>
<p>要往SDCard存放文件，程序必须先判断手机是否装有SDCard,并且可以进行读写。<br>注意：访问SDCard必须在AndroidManifest.xml中加入访问SDCard的权限。<br>Environment.getExternalStorageState()方法用于获取SDCard的状态，如果手机装有SDCard，并且可以进行读写，那么方法返回的状态等于Environment.MEDIA_MOUNTED。<br>Environment.getExternalStorageDirectory()方法用于获取SDCard的目录。</p>
</li>
<li><p>注册广播有几种方式，这些方式有何优缺点？</p>
<blockquote>
<p>两种。 一种是通过代码注册，这种方式注册的广播会跟随程序的生命周期。第二是在AndroidManifest.xml中注册，这种常驻型广播当应用程序关闭后，如果有信息广播来，程序也会被系统调用自动运行。</p>
</blockquote>
</li>
<li><p>什么是ANR 如何避免它?</p>
<blockquote>
<p>在Android上，如果你的应用程序有一段时间响应不够灵敏，系统会向用户显示一个对话框，这个对话框称作应用程序无响应（ANR）对话框。用户可以选择让程序继续运行，但是他们在使用你的应用程序并不希望每次都要处理这个对话框。因此，在程序里对响应性能的设计很重要，这样，系统不会显示ANR给用户。要避免它，应该尽量少在主线程做耗时太长的操作，应该将这些操作放在线程当中去做。</p>
</blockquote>
</li>
<li><p>Android本身的api并未声明会抛出异常，则其在运行时有无可能抛出runtime异常，你遇到过吗?诺有的话会导致什么问题?如何解决?</p>
<blockquote>
<p>有可能，比如空指针异常、数组下表越界等异常，这些异常抛出后可能会导致程序FC。在编写代码时应该做好检测，多考虑可能会发生错误的情况，从代码层次解决这些问题。</p>
</blockquote>
</li>
<li><p>为什么要用 ContentProvider?它和 sql 的实现上有什么差别?</p>
<blockquote>
<p>使用ContentProvider 可以将数据共享给其他应用，让除本应用之外的应用也可以访问本应用的数据。它的底层是用SQLite 数据库实现的，所以其对数据做的各种操作都是以Sql实现，只是在上层提供的是Uri。</p>
</blockquote>
</li>
<li><p>谈谈 UI 中, Padding 和 Margin 有什么区别?</p>
<blockquote>
<p>padding指内边距，表示组件内部元素距离组件边框的距离。<br>marin指外边距，表示组件与组件之间的距离。</p>
</blockquote>
</li>
<li><p>请介绍下 Android 的数据存储方式。</p>
<blockquote>
<ol>
<li>使用SharedPreferences存储数据;</li>
<li>文件存储数据；</li>
<li>SQLite数据库存储数据；</li>
<li>使用ContentProvider存储数据；</li>
<li>网络存储数据；</li>
</ol>
</blockquote>
</li>
<li><p>Android的LPC机制<br>四大组件都可以设置为多进程模式，设置process属性，多进程会导致单例失效，存储失效，有效的多进程之间的访问可以使用AILD， sockct, ContentProvider等。</p>
</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[GreenDao使用详解]]></title>
      <url>http://yoursite.com/2016/10/20/GreenDao%E4%BD%BF%E7%94%A8%E5%9F%BA%E7%A1%80/</url>
      <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p><a href="http://greenrobot.org/greendao/" target="_blank" rel="external">官网地址</a></p>
<p><a href="https://github.com/greenrobot/greenDAO" target="_blank" rel="external">GreenDao github</a></p>
<h1 id="GreenDao-优点"><a href="#GreenDao-优点" class="headerlink" title="GreenDao 优点"></a>GreenDao 优点</h1><ol>
<li>性能高，号称Android最快的关系型数据库</li>
<li>内存占用小</li>
<li>库文件比较小，小于100K，编译时间低，而且可以避免65K方法限制</li>
<li>支持数据库加密  greendao支持SQLCipher进行数据库加密 有关SQLCipher可以参考这篇博客Android数据存储之Sqlite采用SQLCipher数据库加密实战</li>
<li>简洁易用的API</li>
</ol>
<h1 id="GreenDao-3-0基本使用"><a href="#GreenDao-3-0基本使用" class="headerlink" title="GreenDao 3.0基本使用"></a>GreenDao 3.0基本使用</h1><h2 id="在-gradle添加依赖"><a href="#在-gradle添加依赖" class="headerlink" title="在.gradle添加依赖"></a>在.gradle添加依赖</h2><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">buildscript &#123;</div><div class="line">    repositories &#123;</div><div class="line">        mavenCentral()</div><div class="line">    &#125;</div><div class="line">    dependencies &#123;</div><div class="line">        classpath <span class="string">'org.greenrobot:greendao-gradle-plugin:3.2.1'</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">apply <span class="string">plugin:</span> <span class="string">'org.greenrobot.greendao'</span></div><div class="line"></div><div class="line">dependencies &#123;</div><div class="line">    compile <span class="string">'org.greenrobot:greendao:3.2.0'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>需要配置数据库的基本属性</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">greendao &#123;</div><div class="line">    schemaVersion <span class="number">1</span></div><div class="line">    targetGenDir <span class="string">'src/main/java'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>schemaVersion：数据库版本号</li>
<li>daoPackage：设置DaoMaster, DaoSession, Dao包名</li>
<li>targetGenDir: 设置DaoMaster, DaoSession, Dao目录</li>
<li>targetGenDirTest: 设置生成单元测试目录</li>
<li>generateTests 设置自动生成单元测试用例</li>
</ul>
<h2 id="创建实体"><a href="#创建实体" class="headerlink" title="创建实体"></a>创建实体</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Entity</span>()</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Id</span></div><div class="line">    <span class="keyword">private</span> Long id;</div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</div><div class="line">    <span class="comment">//省去了get/set方法</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>实体@Entity注解:</p>
<ul>
<li>schema：表示GreenDao当前实体属于哪个schema</li>
<li>active: 标记一个实体处于活动状态，活动实体有更新，删除和刷新方法</li>
<li>nameInDb: 在数据中使用的别名，默认使用的是实名的类别</li>
<li>indexes: 定义索引，可以跨越多个列</li>
<li>createInDb: 标记创建数据库表</li>
</ul>
<p>基础属性注解:</p>
<ul>
<li>@Id: 主键 Long型，可以通过@Id(autoincrement = true)设置自增长</li>
<li>@Property: 设置一个非默认关系映射所对应的列名，默认是的使用字段名 举例：@Property (nameInDb=”name”)</li>
<li>@NotNul：设置数据库表当前列不能为空</li>
<li>@Transient ：添加次标记之后不会生成数据库表的列</li>
</ul>
<p>索引注解:</p>
<ul>
<li>@Index：使用@Index作为一个属性来创建一个索引，通过name设置索引别名，也可以通过unique给索引添加约束</li>
<li>@Unique：向数据库列添加了一个唯一的约束</li>
</ul>
<p>关系注解:</p>
<ul>
<li>@ToOne：定义与另一个实体（一个实体对象）的关系</li>
<li>@ToMany：定义与多个实体对象的关系</li>
</ul>
<h2 id="编译生成DaoMaster-DaoSession-Dao"><a href="#编译生成DaoMaster-DaoSession-Dao" class="headerlink" title="编译生成DaoMaster, DaoSession, Dao"></a>编译生成DaoMaster, DaoSession, Dao</h2><p><img src="http://ohqvqufyf.bkt.clouddn.com/greendao.png" alt="image"></p>
<ul>
<li><p>创建一个数据库管理者单例</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DBManager</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String dbName = <span class="string">"test_db"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DBManager mInstance;</div><div class="line">    <span class="keyword">private</span> DaoMaster.DevOpenHelper openHelper;</div><div class="line">    <span class="keyword">private</span> Context context;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DBManager</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.context = context;</div><div class="line">        openHelper = <span class="keyword">new</span> DaoMaster.DevOpenHelper(context, dbName, <span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 获取单例引用</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> context</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DBManager <span class="title">getInstance</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (mInstance == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">synchronized</span> (DBManager.class) &#123;</div><div class="line">                <span class="keyword">if</span> (mInstance == <span class="keyword">null</span>) &#123;</div><div class="line">                    mInstance = <span class="keyword">new</span> DBManager(context);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> mInstance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>获取可读可写数据库</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 获取可读数据库</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> SQLiteDatabase <span class="title">getReadableDatabase</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (openHelper == <span class="keyword">null</span>) &#123;</div><div class="line">        openHelper = <span class="keyword">new</span> DaoMaster.DevOpenHelper(context, dbName, <span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> openHelper.getReadableDatabase();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 获取可写数据库</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> SQLiteDatabase <span class="title">getWritableDatabase</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (openHelper == <span class="keyword">null</span>) &#123;</div><div class="line">        openHelper = <span class="keyword">new</span> DaoMaster.DevOpenHelper(context, dbName, <span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> openHelper.getWritableDatabase();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 插入一条记录</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> user</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertUser</span><span class="params">(User user)</span> </span>&#123;</div><div class="line">    DaoMaster daoMaster = <span class="keyword">new</span> DaoMaster(getWritableDatabase());</div><div class="line">    DaoSession daoSession = daoMaster.newSession();</div><div class="line">    UserDao userDao = daoSession.getUserDao();</div><div class="line">    userDao.insert(user);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 插入用户集合</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> users</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertUserList</span><span class="params">(List&lt;User&gt; users)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (users == <span class="keyword">null</span> || users.isEmpty()) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    DaoMaster daoMaster = <span class="keyword">new</span> DaoMaster(getWritableDatabase());</div><div class="line">    DaoSession daoSession = daoMaster.newSession();</div><div class="line">    UserDao userDao = daoSession.getUserDao();</div><div class="line">    userDao.insertInTx(users);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 删除一条记录</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> user</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteUser</span><span class="params">(User user)</span> </span>&#123;</div><div class="line">    DaoMaster daoMaster = <span class="keyword">new</span> DaoMaster(getWritableDatabase());</div><div class="line">    DaoSession daoSession = daoMaster.newSession();</div><div class="line">    UserDao userDao = daoSession.getUserDao();</div><div class="line">    userDao.delete(user);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 更新一条记录</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> user</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateUser</span><span class="params">(User user)</span> </span>&#123;</div><div class="line">    DaoMaster daoMaster = <span class="keyword">new</span> DaoMaster(getWritableDatabase());</div><div class="line">    DaoSession daoSession = daoMaster.newSession();</div><div class="line">    UserDao userDao = daoSession.getUserDao();</div><div class="line">    userDao.update(user);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 查询用户列表</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">queryUserList</span><span class="params">()</span> </span>&#123;</div><div class="line">    DaoMaster daoMaster = <span class="keyword">new</span> DaoMaster(getReadableDatabase());</div><div class="line">    DaoSession daoSession = daoMaster.newSession();</div><div class="line">    UserDao userDao = daoSession.getUserDao();</div><div class="line">    QueryBuilder&lt;User&gt; qb = userDao.queryBuilder();</div><div class="line">    <span class="keyword">return</span> qb.list();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 查询用户列表</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">queryUserList</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</div><div class="line">    DaoMaster daoMaster = <span class="keyword">new</span> DaoMaster(getReadableDatabase());</div><div class="line">    DaoSession daoSession = daoMaster.newSession();</div><div class="line">    UserDao userDao = daoSession.getUserDao();</div><div class="line">    QueryBuilder&lt;User&gt; qb = userDao.queryBuilder();</div><div class="line">    qb.where(UserDao.Properties.Age.gt(age)).orderAsc(UserDao.Properties.Age);</div><div class="line">    <span class="keyword">return</span> qb.list();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="外键使用-ToOne-ToMany"><a href="#外键使用-ToOne-ToMany" class="headerlink" title="外键使用(@ToOne, @ToMany)"></a>外键使用(@ToOne, @ToMany)</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line">    <span class="meta">@Id</span>(autoincrement = <span class="keyword">true</span>)</div><div class="line">    <span class="keyword">private</span> Long id;</div><div class="line"></div><div class="line">    <span class="meta">@NotNull</span></div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Long blogId;</div><div class="line"></div><div class="line">    <span class="meta">@ToOne</span>(joinProperty = <span class="string">"blogId"</span>)</div><div class="line">    <span class="keyword">private</span> Blog blog;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>joinProperties这个参数是referencedJoinProperty 参数的升级版。在referencedJoinProperty参数中我们发现俩个实体关联的外键是CustomerId与id，但是如果我们的需求是外键不能通过id来定义，需要用自己自定义属性来定义，第一种方法就没法用了，而joinProperties就是为了解决这个需求的。</li>
</ul>
<p><a href="https://github.com/SanfenR/AndroidDemo/tree/master/greendaodemo" target="_blank" rel="external">github源码</a></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="http://www.jianshu.com/p/252555228b72" target="_blank" rel="external">GreenDao 3.0使用</a></p>
<p><a href="https://www.cnblogs.com/whoislcj/p/5651396.html" target="_blank" rel="external">Android数据存储之GreenDao 3.0 详解</a></p>
<p><a href="http://www.cnblogs.com/dsxniubility/p/5699543.html" target="_blank" rel="external">GreenDao3.0新特性解析（配置、注解、加密</a></p>
<p><a href="http://www.jianshu.com/p/d61983df2341" target="_blank" rel="external">史上最高效的ORM方案——GreenDao3.0高级用法</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[移位查找（day4）]]></title>
      <url>http://yoursite.com/2016/10/18/everydayc/day4/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><ul>
<li>一个整型数组里除了两个数字之外，其他的数字都出现了两次。<br>请写程序找出这两个只出现一次的数字。要求时间复杂度是O(n)，空间复杂度是O(1)。</li>
</ul>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><ol>
<li>全部元素异或，结果一定不为0，且结果为只出现1次的元素的异或。</li>
<li>以第结果的第一个非0位(假设第N位)来看，所有元素在该位置的0,1都出现了奇数次。</li>
<li>以N为基准，为0的分为一组，为1的分为一组。则这两个数分别分到2组。</li>
<li>这两组分别异或，结果即为所求。</li>
</ol>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//函数功能 ： 找出数组中两个只出现一次的数字</span></div><div class="line"><span class="comment">//函数参数 ： arr为源数组，len为数组元素个数，result用来存放结果</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">function1</span><span class="params">(<span class="keyword">int</span> *arr, <span class="keyword">int</span> len, <span class="keyword">int</span> *result)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> i, all = <span class="number">0</span>, flag = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123; <span class="comment">//所有数异或</span></div><div class="line">        all ^= arr[i];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">while</span> (!all &amp; flag) &#123;</div><div class="line">        flag &lt;&lt;= <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    result[<span class="number">0</span>] = result[<span class="number">1</span>] = <span class="number">0</span>;</div><div class="line">    <span class="comment">//利用过滤位区分</span></div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++) &#123;</div><div class="line">        <span class="keyword">if</span> (flag &amp; arr[i])</div><div class="line">            result[<span class="number">0</span>] ^= arr[i];</div><div class="line">        <span class="keyword">else</span></div><div class="line">            result[<span class="number">1</span>] ^= arr[i];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="https://github.com/SanfenR/EveryDayC" target="_blank" rel="external">源码github</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[链表删除(day3)]]></title>
      <url>http://yoursite.com/2016/10/06/everydayc/day3/</url>
      <content type="html"><![CDATA[<h3 id="假设链表……—A–B–C–D…-，要删除B。一般的做法是遍历链表并记录前驱节点，修改指针，时间为O-n-。删除节点的实质为更改后驱指针指向。-这里，复制C的内容至B-此时B，C同时指向D-，删除节点C，即达到间接删除节点B的目的。-倘若B是链尾节点。则需要线性遍历寻找前驱节点。以上思路，时间复杂度为O-1-。"><a href="#假设链表……—A–B–C–D…-，要删除B。一般的做法是遍历链表并记录前驱节点，修改指针，时间为O-n-。删除节点的实质为更改后驱指针指向。-这里，复制C的内容至B-此时B，C同时指向D-，删除节点C，即达到间接删除节点B的目的。-倘若B是链尾节点。则需要线性遍历寻找前驱节点。以上思路，时间复杂度为O-1-。" class="headerlink" title="假设链表……—A–B–C–D….，要删除B。一般的做法是遍历链表并记录前驱节点，修改指针，时间为O(n)。删除节点的实质为更改后驱指针指向。 这里，复制C的内容至B(此时B，C同时指向D)，删除节点C，即达到间接删除节点B的目的。 倘若B是链尾节点。则需要线性遍历寻找前驱节点。以上思路，时间复杂度为O(1)。"></a>假设链表……—A–B–C–D….，要删除B。一般的做法是遍历链表并记录前驱节点，修改指针，时间为O(n)。删除节点的实质为更改后驱指针指向。 这里，复制C的内容至B(此时B，C同时指向D)，删除节点C，即达到间接删除节点B的目的。 倘若B是链尾节点。则需要线性遍历寻找前驱节点。以上思路，时间复杂度为O(1)。</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> ListNode &#123;</div><div class="line">    <span class="keyword">int</span> m_nKey;</div><div class="line">    ListNode *m_pNext;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteNode</span><span class="params">(ListNode* pListHead, ListNode* pToBeDeleted)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!pListHead || !pToBeDeleted) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (pListHead == pToBeDeleted)&#123;</div><div class="line">        <span class="keyword">delete</span> pListHead;</div><div class="line">        pListHead = <span class="literal">NULL</span>;</div><div class="line">        pToBeDeleted = <span class="literal">NULL</span>;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pToBeDeleted-&gt;m_pNext != <span class="literal">NULL</span>) &#123;</div><div class="line">        ListNode *pNext = pToBeDeleted-&gt;m_pNext;</div><div class="line">        pToBeDeleted-&gt;m_nKey = pNext-&gt;m_nKey;</div><div class="line">        pToBeDeleted-&gt;m_pNext = pNext-&gt;m_pNext;</div><div class="line">        <span class="keyword">delete</span> pNext;</div><div class="line">        pNext = <span class="literal">NULL</span>;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        ListNode* pNode = pListHead;</div><div class="line">        <span class="keyword">while</span>(pNode-&gt;m_pNext != pToBeDeleted) &#123;</div><div class="line">            pNode = pNode-&gt;m_pNext;</div><div class="line">        &#125;</div><div class="line">        pNode-&gt;m_pNext = <span class="literal">NULL</span>;</div><div class="line">        <span class="keyword">delete</span> pToBeDeleted;</div><div class="line">        pToBeDeleted = <span class="literal">NULL</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="https://github.com/SanfenR/EveryDayC" target="_blank" rel="external">源码github</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[位运算计数(day2)]]></title>
      <url>http://yoursite.com/2016/09/20/everydayc/day2/</url>
      <content type="html"><![CDATA[<h3 id="题目-求整数的2进制表示中1的个数"><a href="#题目-求整数的2进制表示中1的个数" class="headerlink" title="题目: 求整数的2进制表示中1的个数"></a>题目: 求整数的2进制表示中1的个数</h3><h4 id="整数-右移-相与"><a href="#整数-右移-相与" class="headerlink" title="整数 右移 相与"></a>整数 右移 相与</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">function1</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(i) &#123;</div><div class="line">        <span class="keyword">if</span>(i &amp; <span class="number">1</span>)</div><div class="line">            count ++;</div><div class="line">        i = i &gt;&gt; <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> count;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="flag-左移-相与"><a href="#flag-左移-相与" class="headerlink" title="flag 左移 相与"></a>flag 左移 相与</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">function2</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> flag = <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span>(flag)&#123;</div><div class="line">        <span class="keyword">if</span>(i &amp; flag)&#123;</div><div class="line">            count ++;</div><div class="line">        &#125;</div><div class="line">        flag = flag &lt;&lt; <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> count;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="减一相与"><a href="#减一相与" class="headerlink" title="减一相与"></a>减一相与</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">function3</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (i) &#123;</div><div class="line">        ++ count;</div><div class="line">        i = (i - <span class="number">1</span>) &amp; i;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> count;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="https://github.com/SanfenR/EveryDayC" target="_blank" rel="external">源码github</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[递归加法(day1)]]></title>
      <url>http://yoursite.com/2016/08/06/everydayc/day1/</url>
      <content type="html"><![CDATA[<h3 id="题目：求1-2-…-n，要求不能使用乘除法、for、while、if、else、switch、case等关键字以及条件判断语句（A-B-C"><a href="#题目：求1-2-…-n，要求不能使用乘除法、for、while、if、else、switch、case等关键字以及条件判断语句（A-B-C" class="headerlink" title="题目：求1+2+…+n，要求不能使用乘除法、for、while、if、else、switch、case等关键字以及条件判断语句（A?B:C)."></a>题目：求1+2+…+n，要求不能使用乘除法、for、while、if、else、switch、case等关键字以及条件判断语句（A?B:C).</h3><h4 id="使用函数指针"><a href="#使用函数指针" class="headerlink" title="使用函数指针"></a>使用函数指针</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//-----&gt;fun1 start</span></div><div class="line"><span class="comment">//使用函数指针 递归加法</span></div><div class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span> <span class="params">(*fun)</span><span class="params">(<span class="keyword">int</span>)</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">func1</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">func2</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">    fun f[<span class="number">2</span>] = &#123;func1, func2&#125;;</div><div class="line">    <span class="keyword">return</span> n + f[(n != <span class="number">0</span>)](n - <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">function1</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; func2(<span class="number">10</span>) &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">//-----&gt;fun2 end</span></div></pre></td></tr></table></figure>
<h4 id="使用静态变量"><a href="#使用静态变量" class="headerlink" title="使用静态变量"></a>使用静态变量</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//-----&gt;fun2 start</span></div><div class="line"><span class="comment">//使用静态变量</span></div><div class="line"><span class="keyword">class</span> test &#123;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">int</span> N;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">int</span> sum;</div><div class="line"><span class="keyword">public</span> :</div><div class="line">    test() &#123;</div><div class="line">        sum += ++N;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">reset</span><span class="params">()</span> </span>&#123;</div><div class="line">        N = sum = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getSum</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> sum;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">int</span> test::N = <span class="number">0</span>;</div><div class="line"><span class="keyword">int</span> test::sum = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">function2</span><span class="params">()</span> </span>&#123;</div><div class="line">    test::reset();</div><div class="line">    test *p = <span class="keyword">new</span> test[<span class="number">10</span>];</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; test::getSum() &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">delete</span>[]p;</div><div class="line">&#125;</div><div class="line"><span class="comment">//---&gt;fun2 end</span></div></pre></td></tr></table></figure>
<h4 id="使用虚函数的编译多态性"><a href="#使用虚函数的编译多态性" class="headerlink" title="使用虚函数的编译多态性"></a>使用虚函数的编译多态性</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//-----&gt;fun3 start</span></div><div class="line"><span class="comment">//使用虚函数的编译多态性</span></div><div class="line"></div><div class="line"><span class="keyword">class</span> A &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123; <span class="keyword">return</span> <span class="number">0</span>; &#125;;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">class</span> B : <span class="keyword">public</span> A &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">        A a;</div><div class="line">        B b;</div><div class="line">        A *p[<span class="number">2</span>] = &#123;&amp;a, &amp;b&#125;;</div><div class="line">        <span class="keyword">return</span> n + p[(n - <span class="number">1</span> != <span class="number">0</span>)]-&gt;sum(n - <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">function3</span><span class="params">()</span> </span>&#123;</div><div class="line">    B b;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; b.sum(<span class="number">10</span>) &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//-----&gt;fun3 end</span></div></pre></td></tr></table></figure>
<p><a href="https://github.com/SanfenR/EveryDayC" target="_blank" rel="external">源码github</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[GitHub不允许上传大于100M文件问题]]></title>
      <url>http://yoursite.com/2016/05/20/github%E4%B8%8A%E4%BC%A0%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">自己的项目的版本控制用的是Git，代码仓库在github托管。项目里用到了百度导航SDK，由于百度导航SDK有了新版本，于是就更新到了新版本，更新好了之后想把代码push到github上，结果出错了，被拒绝，具体信息是：Total 3007 (delta 664), reused 0 (delta 0)</div><div class="line">remote: error: GH001: Large files detected.</div><div class="line">remote: error: Trace: 7b7de6b9372ee392e0f3961b05ea6f33</div><div class="line">remote: error: See http://git.io/iEPt8g for more information.</div><div class="line">remote: error: File  XXX/XXX/BaiduNaviSDK/libbaiduNaviSDK.a is 102.68 MB; this exceeds GitHub&apos;s file size limit of 100.00 MB</div><div class="line">To https://github.com/XXX/XXXX.git。意思是有大文件，更多信息可到http://git.io/iEPt8g查看，文件libbaiduNaviSDK.a的大小超过了GitHub限制的100M大小。想要push，必须把这个文件移除，可是要怎么移除呢？</div></pre></td></tr></table></figure>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><h6 id="第一种解决方案"><a href="#第一种解决方案" class="headerlink" title="第一种解决方案"></a>第一种解决方案</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">如果这个文件是最近一次commit的，并且你还没有push到github，那么</div><div class="line">第一步输入命令 cd /Users/Dora/Desktop/XXX</div><div class="line">（cd后面的这个路径要换成你自己项目的路径），</div><div class="line">然后第二步输入命令 git rm --cached /Users/Dora/Desktop/XXX/XXX/libbaiduNaviSDK.a（加下划线部分是你自己的要移除的文件的路径），</div><div class="line">第三步输入命令 git commit --amend -CHEAD，</div><div class="line">执行完这步后，这个大文件将会从你的commit记录里移除，并且以后commit都将不会再把它commit了，这时候就可以git push把本地代码push到github上了。</div></pre></td></tr></table></figure>
<h3 id="第二种解决方案"><a href="#第二种解决方案" class="headerlink" title="第二种解决方案"></a>第二种解决方案</h3><h5 id="用到一个叫BFG的工具。我们要到-https-rtyley-github-io-bfg-repo-cleaner-download-这个网站去下载并学习如何使用这个工具"><a href="#用到一个叫BFG的工具。我们要到-https-rtyley-github-io-bfg-repo-cleaner-download-这个网站去下载并学习如何使用这个工具" class="headerlink" title="用到一个叫BFG的工具。我们要到[https://rtyley.github.io/bfg-repo-cleaner/#download]这个网站去下载并学习如何使用这个工具"></a>用到一个叫BFG的工具。我们要到[<a href="https://rtyley.github.io/bfg-repo-cleaner/#download]这个网站去下载并学习如何使用这个工具" target="_blank" rel="external">https://rtyley.github.io/bfg-repo-cleaner/#download]这个网站去下载并学习如何使用这个工具</a></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">我们要cd进BFG文件所在目录，第一步输入命令</div><div class="line">java -jar bfg.jar --no-blob-protection --strip-blobs-bigger-than 50M my-repo.git</div><div class="line"></div><div class="line">（红色部分是你下载下来的文件的名字,蓝色部分是你需要移除的文件大小，橙色部分是你自己.git文件的路径），</div><div class="line">第二步cd my-repo.git ，</div><div class="line">第三步 git reflog expire --expire=now --all &amp;&amp; git gc --prune=now --aggressive，</div><div class="line">第四步 git push，</div><div class="line">到此大功告成。你的commit历史里所有大于50M的文件的commit全部被清除，这样你就可以push到github上了。这里只是记录了怎么处理遇到的问题，</div><div class="line">如果想要知道原理，则需要好好好去学习学习。</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
  
  
</search>
